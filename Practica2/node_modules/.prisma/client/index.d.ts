
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model comprador
 * 
 */
export type comprador = $Result.DefaultSelection<Prisma.$compradorPayload>
/**
 * Model producto
 * 
 */
export type producto = $Result.DefaultSelection<Prisma.$productoPayload>
/**
 * Model transaccion
 * 
 */
export type transaccion = $Result.DefaultSelection<Prisma.$transaccionPayload>
/**
 * Model usuario
 * 
 */
export type usuario = $Result.DefaultSelection<Prisma.$usuarioPayload>
/**
 * Model artesano
 * 
 */
export type artesano = $Result.DefaultSelection<Prisma.$artesanoPayload>
/**
 * Model categoria
 * 
 */
export type categoria = $Result.DefaultSelection<Prisma.$categoriaPayload>
/**
 * Model carrito
 * 
 */
export type carrito = $Result.DefaultSelection<Prisma.$carritoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Compradors
 * const compradors = await prisma.comprador.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Compradors
   * const compradors = await prisma.comprador.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.comprador`: Exposes CRUD operations for the **comprador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compradors
    * const compradors = await prisma.comprador.findMany()
    * ```
    */
  get comprador(): Prisma.compradorDelegate<ExtArgs>;

  /**
   * `prisma.producto`: Exposes CRUD operations for the **producto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Productos
    * const productos = await prisma.producto.findMany()
    * ```
    */
  get producto(): Prisma.productoDelegate<ExtArgs>;

  /**
   * `prisma.transaccion`: Exposes CRUD operations for the **transaccion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transaccions
    * const transaccions = await prisma.transaccion.findMany()
    * ```
    */
  get transaccion(): Prisma.transaccionDelegate<ExtArgs>;

  /**
   * `prisma.usuario`: Exposes CRUD operations for the **usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.usuarioDelegate<ExtArgs>;

  /**
   * `prisma.artesano`: Exposes CRUD operations for the **artesano** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Artesanos
    * const artesanos = await prisma.artesano.findMany()
    * ```
    */
  get artesano(): Prisma.artesanoDelegate<ExtArgs>;

  /**
   * `prisma.categoria`: Exposes CRUD operations for the **categoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categoria.findMany()
    * ```
    */
  get categoria(): Prisma.categoriaDelegate<ExtArgs>;

  /**
   * `prisma.carrito`: Exposes CRUD operations for the **carrito** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carritos
    * const carritos = await prisma.carrito.findMany()
    * ```
    */
  get carrito(): Prisma.carritoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.6.0
   * Query Engine version: e95e739751f42d8ca026f6b910f5a2dc5adeaeee
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    comprador: 'comprador',
    producto: 'producto',
    transaccion: 'transaccion',
    usuario: 'usuario',
    artesano: 'artesano',
    categoria: 'categoria',
    carrito: 'carrito'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'comprador' | 'producto' | 'transaccion' | 'usuario' | 'artesano' | 'categoria' | 'carrito'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      comprador: {
        payload: Prisma.$compradorPayload<ExtArgs>
        fields: Prisma.compradorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.compradorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compradorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.compradorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compradorPayload>
          }
          findFirst: {
            args: Prisma.compradorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compradorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.compradorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compradorPayload>
          }
          findMany: {
            args: Prisma.compradorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compradorPayload>[]
          }
          create: {
            args: Prisma.compradorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compradorPayload>
          }
          createMany: {
            args: Prisma.compradorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.compradorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compradorPayload>
          }
          update: {
            args: Prisma.compradorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compradorPayload>
          }
          deleteMany: {
            args: Prisma.compradorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.compradorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.compradorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compradorPayload>
          }
          aggregate: {
            args: Prisma.CompradorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateComprador>
          }
          groupBy: {
            args: Prisma.compradorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CompradorGroupByOutputType>[]
          }
          count: {
            args: Prisma.compradorCountArgs<ExtArgs>,
            result: $Utils.Optional<CompradorCountAggregateOutputType> | number
          }
        }
      }
      producto: {
        payload: Prisma.$productoPayload<ExtArgs>
        fields: Prisma.productoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productoPayload>
          }
          findFirst: {
            args: Prisma.productoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productoPayload>
          }
          findMany: {
            args: Prisma.productoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productoPayload>[]
          }
          create: {
            args: Prisma.productoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productoPayload>
          }
          createMany: {
            args: Prisma.productoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.productoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productoPayload>
          }
          update: {
            args: Prisma.productoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productoPayload>
          }
          deleteMany: {
            args: Prisma.productoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.productoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.productoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productoPayload>
          }
          aggregate: {
            args: Prisma.ProductoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProducto>
          }
          groupBy: {
            args: Prisma.productoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductoGroupByOutputType>[]
          }
          count: {
            args: Prisma.productoCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductoCountAggregateOutputType> | number
          }
        }
      }
      transaccion: {
        payload: Prisma.$transaccionPayload<ExtArgs>
        fields: Prisma.transaccionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.transaccionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$transaccionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.transaccionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$transaccionPayload>
          }
          findFirst: {
            args: Prisma.transaccionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$transaccionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.transaccionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$transaccionPayload>
          }
          findMany: {
            args: Prisma.transaccionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$transaccionPayload>[]
          }
          create: {
            args: Prisma.transaccionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$transaccionPayload>
          }
          createMany: {
            args: Prisma.transaccionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.transaccionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$transaccionPayload>
          }
          update: {
            args: Prisma.transaccionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$transaccionPayload>
          }
          deleteMany: {
            args: Prisma.transaccionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.transaccionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.transaccionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$transaccionPayload>
          }
          aggregate: {
            args: Prisma.TransaccionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTransaccion>
          }
          groupBy: {
            args: Prisma.transaccionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TransaccionGroupByOutputType>[]
          }
          count: {
            args: Prisma.transaccionCountArgs<ExtArgs>,
            result: $Utils.Optional<TransaccionCountAggregateOutputType> | number
          }
        }
      }
      usuario: {
        payload: Prisma.$usuarioPayload<ExtArgs>
        fields: Prisma.usuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usuarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usuarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          findFirst: {
            args: Prisma.usuarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usuarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          findMany: {
            args: Prisma.usuarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>[]
          }
          create: {
            args: Prisma.usuarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          createMany: {
            args: Prisma.usuarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usuarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          update: {
            args: Prisma.usuarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          deleteMany: {
            args: Prisma.usuarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usuarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usuarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.usuarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.usuarioCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      artesano: {
        payload: Prisma.$artesanoPayload<ExtArgs>
        fields: Prisma.artesanoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.artesanoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$artesanoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.artesanoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$artesanoPayload>
          }
          findFirst: {
            args: Prisma.artesanoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$artesanoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.artesanoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$artesanoPayload>
          }
          findMany: {
            args: Prisma.artesanoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$artesanoPayload>[]
          }
          create: {
            args: Prisma.artesanoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$artesanoPayload>
          }
          createMany: {
            args: Prisma.artesanoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.artesanoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$artesanoPayload>
          }
          update: {
            args: Prisma.artesanoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$artesanoPayload>
          }
          deleteMany: {
            args: Prisma.artesanoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.artesanoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.artesanoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$artesanoPayload>
          }
          aggregate: {
            args: Prisma.ArtesanoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateArtesano>
          }
          groupBy: {
            args: Prisma.artesanoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ArtesanoGroupByOutputType>[]
          }
          count: {
            args: Prisma.artesanoCountArgs<ExtArgs>,
            result: $Utils.Optional<ArtesanoCountAggregateOutputType> | number
          }
        }
      }
      categoria: {
        payload: Prisma.$categoriaPayload<ExtArgs>
        fields: Prisma.categoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoriaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          findFirst: {
            args: Prisma.categoriaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          findMany: {
            args: Prisma.categoriaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>[]
          }
          create: {
            args: Prisma.categoriaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          createMany: {
            args: Prisma.categoriaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.categoriaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          update: {
            args: Prisma.categoriaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          deleteMany: {
            args: Prisma.categoriaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.categoriaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.categoriaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          aggregate: {
            args: Prisma.CategoriaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategoria>
          }
          groupBy: {
            args: Prisma.categoriaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoriaCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriaCountAggregateOutputType> | number
          }
        }
      }
      carrito: {
        payload: Prisma.$carritoPayload<ExtArgs>
        fields: Prisma.carritoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.carritoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carritoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.carritoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carritoPayload>
          }
          findFirst: {
            args: Prisma.carritoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carritoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.carritoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carritoPayload>
          }
          findMany: {
            args: Prisma.carritoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carritoPayload>[]
          }
          create: {
            args: Prisma.carritoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carritoPayload>
          }
          createMany: {
            args: Prisma.carritoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.carritoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carritoPayload>
          }
          update: {
            args: Prisma.carritoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carritoPayload>
          }
          deleteMany: {
            args: Prisma.carritoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.carritoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.carritoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$carritoPayload>
          }
          aggregate: {
            args: Prisma.CarritoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCarrito>
          }
          groupBy: {
            args: Prisma.carritoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CarritoGroupByOutputType>[]
          }
          count: {
            args: Prisma.carritoCountArgs<ExtArgs>,
            result: $Utils.Optional<CarritoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CompradorCountOutputType
   */

  export type CompradorCountOutputType = {
    Carrito: number
    Transaccion: number
  }

  export type CompradorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Carrito?: boolean | CompradorCountOutputTypeCountCarritoArgs
    Transaccion?: boolean | CompradorCountOutputTypeCountTransaccionArgs
  }

  // Custom InputTypes

  /**
   * CompradorCountOutputType without action
   */
  export type CompradorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompradorCountOutputType
     */
    select?: CompradorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CompradorCountOutputType without action
   */
  export type CompradorCountOutputTypeCountCarritoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: carritoWhereInput
  }


  /**
   * CompradorCountOutputType without action
   */
  export type CompradorCountOutputTypeCountTransaccionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transaccionWhereInput
  }



  /**
   * Count Type ProductoCountOutputType
   */

  export type ProductoCountOutputType = {
    Transaccion: number
  }

  export type ProductoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Transaccion?: boolean | ProductoCountOutputTypeCountTransaccionArgs
  }

  // Custom InputTypes

  /**
   * ProductoCountOutputType without action
   */
  export type ProductoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoCountOutputType
     */
    select?: ProductoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProductoCountOutputType without action
   */
  export type ProductoCountOutputTypeCountTransaccionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transaccionWhereInput
  }



  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    Artesano: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Artesano?: boolean | UsuarioCountOutputTypeCountArtesanoArgs
  }

  // Custom InputTypes

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountArtesanoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: artesanoWhereInput
  }



  /**
   * Count Type ArtesanoCountOutputType
   */

  export type ArtesanoCountOutputType = {
    Productos: number
    Usuario: number
  }

  export type ArtesanoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Productos?: boolean | ArtesanoCountOutputTypeCountProductosArgs
    Usuario?: boolean | ArtesanoCountOutputTypeCountUsuarioArgs
  }

  // Custom InputTypes

  /**
   * ArtesanoCountOutputType without action
   */
  export type ArtesanoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtesanoCountOutputType
     */
    select?: ArtesanoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ArtesanoCountOutputType without action
   */
  export type ArtesanoCountOutputTypeCountProductosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productoWhereInput
  }


  /**
   * ArtesanoCountOutputType without action
   */
  export type ArtesanoCountOutputTypeCountUsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuarioWhereInput
  }



  /**
   * Count Type CategoriaCountOutputType
   */

  export type CategoriaCountOutputType = {
    Productos: number
  }

  export type CategoriaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Productos?: boolean | CategoriaCountOutputTypeCountProductosArgs
  }

  // Custom InputTypes

  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaCountOutputType
     */
    select?: CategoriaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeCountProductosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productoWhereInput
  }



  /**
   * Models
   */

  /**
   * Model comprador
   */

  export type AggregateComprador = {
    _count: CompradorCountAggregateOutputType | null
    _avg: CompradorAvgAggregateOutputType | null
    _sum: CompradorSumAggregateOutputType | null
    _min: CompradorMinAggregateOutputType | null
    _max: CompradorMaxAggregateOutputType | null
  }

  export type CompradorAvgAggregateOutputType = {
    id_comprador: number | null
  }

  export type CompradorSumAggregateOutputType = {
    id_comprador: number | null
  }

  export type CompradorMinAggregateOutputType = {
    id_comprador: number | null
    direccion_comp: string | null
    ciudad_comp: string | null
    telefono_comp: string | null
    nombre_comp: string | null
  }

  export type CompradorMaxAggregateOutputType = {
    id_comprador: number | null
    direccion_comp: string | null
    ciudad_comp: string | null
    telefono_comp: string | null
    nombre_comp: string | null
  }

  export type CompradorCountAggregateOutputType = {
    id_comprador: number
    direccion_comp: number
    ciudad_comp: number
    telefono_comp: number
    nombre_comp: number
    _all: number
  }


  export type CompradorAvgAggregateInputType = {
    id_comprador?: true
  }

  export type CompradorSumAggregateInputType = {
    id_comprador?: true
  }

  export type CompradorMinAggregateInputType = {
    id_comprador?: true
    direccion_comp?: true
    ciudad_comp?: true
    telefono_comp?: true
    nombre_comp?: true
  }

  export type CompradorMaxAggregateInputType = {
    id_comprador?: true
    direccion_comp?: true
    ciudad_comp?: true
    telefono_comp?: true
    nombre_comp?: true
  }

  export type CompradorCountAggregateInputType = {
    id_comprador?: true
    direccion_comp?: true
    ciudad_comp?: true
    telefono_comp?: true
    nombre_comp?: true
    _all?: true
  }

  export type CompradorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which comprador to aggregate.
     */
    where?: compradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compradors to fetch.
     */
    orderBy?: compradorOrderByWithRelationInput | compradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: compradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned compradors
    **/
    _count?: true | CompradorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompradorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompradorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompradorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompradorMaxAggregateInputType
  }

  export type GetCompradorAggregateType<T extends CompradorAggregateArgs> = {
        [P in keyof T & keyof AggregateComprador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComprador[P]>
      : GetScalarType<T[P], AggregateComprador[P]>
  }




  export type compradorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: compradorWhereInput
    orderBy?: compradorOrderByWithAggregationInput | compradorOrderByWithAggregationInput[]
    by: CompradorScalarFieldEnum[] | CompradorScalarFieldEnum
    having?: compradorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompradorCountAggregateInputType | true
    _avg?: CompradorAvgAggregateInputType
    _sum?: CompradorSumAggregateInputType
    _min?: CompradorMinAggregateInputType
    _max?: CompradorMaxAggregateInputType
  }

  export type CompradorGroupByOutputType = {
    id_comprador: number
    direccion_comp: string
    ciudad_comp: string
    telefono_comp: string
    nombre_comp: string | null
    _count: CompradorCountAggregateOutputType | null
    _avg: CompradorAvgAggregateOutputType | null
    _sum: CompradorSumAggregateOutputType | null
    _min: CompradorMinAggregateOutputType | null
    _max: CompradorMaxAggregateOutputType | null
  }

  type GetCompradorGroupByPayload<T extends compradorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompradorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompradorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompradorGroupByOutputType[P]>
            : GetScalarType<T[P], CompradorGroupByOutputType[P]>
        }
      >
    >


  export type compradorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_comprador?: boolean
    direccion_comp?: boolean
    ciudad_comp?: boolean
    telefono_comp?: boolean
    nombre_comp?: boolean
    Carrito?: boolean | comprador$CarritoArgs<ExtArgs>
    Transaccion?: boolean | comprador$TransaccionArgs<ExtArgs>
    _count?: boolean | CompradorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comprador"]>

  export type compradorSelectScalar = {
    id_comprador?: boolean
    direccion_comp?: boolean
    ciudad_comp?: boolean
    telefono_comp?: boolean
    nombre_comp?: boolean
  }

  export type compradorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Carrito?: boolean | comprador$CarritoArgs<ExtArgs>
    Transaccion?: boolean | comprador$TransaccionArgs<ExtArgs>
    _count?: boolean | CompradorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $compradorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "comprador"
    objects: {
      Carrito: Prisma.$carritoPayload<ExtArgs>[]
      Transaccion: Prisma.$transaccionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_comprador: number
      direccion_comp: string
      ciudad_comp: string
      telefono_comp: string
      nombre_comp: string | null
    }, ExtArgs["result"]["comprador"]>
    composites: {}
  }


  type compradorGetPayload<S extends boolean | null | undefined | compradorDefaultArgs> = $Result.GetResult<Prisma.$compradorPayload, S>

  type compradorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<compradorFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CompradorCountAggregateInputType | true
    }

  export interface compradorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['comprador'], meta: { name: 'comprador' } }
    /**
     * Find zero or one Comprador that matches the filter.
     * @param {compradorFindUniqueArgs} args - Arguments to find a Comprador
     * @example
     * // Get one Comprador
     * const comprador = await prisma.comprador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends compradorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, compradorFindUniqueArgs<ExtArgs>>
    ): Prisma__compradorClient<$Result.GetResult<Prisma.$compradorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Comprador that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {compradorFindUniqueOrThrowArgs} args - Arguments to find a Comprador
     * @example
     * // Get one Comprador
     * const comprador = await prisma.comprador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends compradorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, compradorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__compradorClient<$Result.GetResult<Prisma.$compradorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Comprador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compradorFindFirstArgs} args - Arguments to find a Comprador
     * @example
     * // Get one Comprador
     * const comprador = await prisma.comprador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends compradorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, compradorFindFirstArgs<ExtArgs>>
    ): Prisma__compradorClient<$Result.GetResult<Prisma.$compradorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Comprador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compradorFindFirstOrThrowArgs} args - Arguments to find a Comprador
     * @example
     * // Get one Comprador
     * const comprador = await prisma.comprador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends compradorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, compradorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__compradorClient<$Result.GetResult<Prisma.$compradorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Compradors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compradorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compradors
     * const compradors = await prisma.comprador.findMany()
     * 
     * // Get first 10 Compradors
     * const compradors = await prisma.comprador.findMany({ take: 10 })
     * 
     * // Only select the `id_comprador`
     * const compradorWithId_compradorOnly = await prisma.comprador.findMany({ select: { id_comprador: true } })
     * 
    **/
    findMany<T extends compradorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, compradorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$compradorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Comprador.
     * @param {compradorCreateArgs} args - Arguments to create a Comprador.
     * @example
     * // Create one Comprador
     * const Comprador = await prisma.comprador.create({
     *   data: {
     *     // ... data to create a Comprador
     *   }
     * })
     * 
    **/
    create<T extends compradorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, compradorCreateArgs<ExtArgs>>
    ): Prisma__compradorClient<$Result.GetResult<Prisma.$compradorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Compradors.
     *     @param {compradorCreateManyArgs} args - Arguments to create many Compradors.
     *     @example
     *     // Create many Compradors
     *     const comprador = await prisma.comprador.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends compradorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, compradorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comprador.
     * @param {compradorDeleteArgs} args - Arguments to delete one Comprador.
     * @example
     * // Delete one Comprador
     * const Comprador = await prisma.comprador.delete({
     *   where: {
     *     // ... filter to delete one Comprador
     *   }
     * })
     * 
    **/
    delete<T extends compradorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, compradorDeleteArgs<ExtArgs>>
    ): Prisma__compradorClient<$Result.GetResult<Prisma.$compradorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Comprador.
     * @param {compradorUpdateArgs} args - Arguments to update one Comprador.
     * @example
     * // Update one Comprador
     * const comprador = await prisma.comprador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends compradorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, compradorUpdateArgs<ExtArgs>>
    ): Prisma__compradorClient<$Result.GetResult<Prisma.$compradorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Compradors.
     * @param {compradorDeleteManyArgs} args - Arguments to filter Compradors to delete.
     * @example
     * // Delete a few Compradors
     * const { count } = await prisma.comprador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends compradorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, compradorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compradorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compradors
     * const comprador = await prisma.comprador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends compradorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, compradorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comprador.
     * @param {compradorUpsertArgs} args - Arguments to update or create a Comprador.
     * @example
     * // Update or create a Comprador
     * const comprador = await prisma.comprador.upsert({
     *   create: {
     *     // ... data to create a Comprador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comprador we want to update
     *   }
     * })
    **/
    upsert<T extends compradorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, compradorUpsertArgs<ExtArgs>>
    ): Prisma__compradorClient<$Result.GetResult<Prisma.$compradorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Compradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compradorCountArgs} args - Arguments to filter Compradors to count.
     * @example
     * // Count the number of Compradors
     * const count = await prisma.comprador.count({
     *   where: {
     *     // ... the filter for the Compradors we want to count
     *   }
     * })
    **/
    count<T extends compradorCountArgs>(
      args?: Subset<T, compradorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompradorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comprador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompradorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompradorAggregateArgs>(args: Subset<T, CompradorAggregateArgs>): Prisma.PrismaPromise<GetCompradorAggregateType<T>>

    /**
     * Group by Comprador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compradorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends compradorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: compradorGroupByArgs['orderBy'] }
        : { orderBy?: compradorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, compradorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompradorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the comprador model
   */
  readonly fields: compradorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for comprador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__compradorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Carrito<T extends comprador$CarritoArgs<ExtArgs> = {}>(args?: Subset<T, comprador$CarritoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$carritoPayload<ExtArgs>, T, 'findMany'> | Null>;

    Transaccion<T extends comprador$TransaccionArgs<ExtArgs> = {}>(args?: Subset<T, comprador$TransaccionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transaccionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the comprador model
   */ 
  interface compradorFieldRefs {
    readonly id_comprador: FieldRef<"comprador", 'Int'>
    readonly direccion_comp: FieldRef<"comprador", 'String'>
    readonly ciudad_comp: FieldRef<"comprador", 'String'>
    readonly telefono_comp: FieldRef<"comprador", 'String'>
    readonly nombre_comp: FieldRef<"comprador", 'String'>
  }
    

  // Custom InputTypes

  /**
   * comprador findUnique
   */
  export type compradorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comprador
     */
    select?: compradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compradorInclude<ExtArgs> | null
    /**
     * Filter, which comprador to fetch.
     */
    where: compradorWhereUniqueInput
  }


  /**
   * comprador findUniqueOrThrow
   */
  export type compradorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comprador
     */
    select?: compradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compradorInclude<ExtArgs> | null
    /**
     * Filter, which comprador to fetch.
     */
    where: compradorWhereUniqueInput
  }


  /**
   * comprador findFirst
   */
  export type compradorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comprador
     */
    select?: compradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compradorInclude<ExtArgs> | null
    /**
     * Filter, which comprador to fetch.
     */
    where?: compradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compradors to fetch.
     */
    orderBy?: compradorOrderByWithRelationInput | compradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for compradors.
     */
    cursor?: compradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of compradors.
     */
    distinct?: CompradorScalarFieldEnum | CompradorScalarFieldEnum[]
  }


  /**
   * comprador findFirstOrThrow
   */
  export type compradorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comprador
     */
    select?: compradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compradorInclude<ExtArgs> | null
    /**
     * Filter, which comprador to fetch.
     */
    where?: compradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compradors to fetch.
     */
    orderBy?: compradorOrderByWithRelationInput | compradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for compradors.
     */
    cursor?: compradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of compradors.
     */
    distinct?: CompradorScalarFieldEnum | CompradorScalarFieldEnum[]
  }


  /**
   * comprador findMany
   */
  export type compradorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comprador
     */
    select?: compradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compradorInclude<ExtArgs> | null
    /**
     * Filter, which compradors to fetch.
     */
    where?: compradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compradors to fetch.
     */
    orderBy?: compradorOrderByWithRelationInput | compradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing compradors.
     */
    cursor?: compradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compradors.
     */
    skip?: number
    distinct?: CompradorScalarFieldEnum | CompradorScalarFieldEnum[]
  }


  /**
   * comprador create
   */
  export type compradorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comprador
     */
    select?: compradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compradorInclude<ExtArgs> | null
    /**
     * The data needed to create a comprador.
     */
    data: XOR<compradorCreateInput, compradorUncheckedCreateInput>
  }


  /**
   * comprador createMany
   */
  export type compradorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many compradors.
     */
    data: compradorCreateManyInput | compradorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * comprador update
   */
  export type compradorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comprador
     */
    select?: compradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compradorInclude<ExtArgs> | null
    /**
     * The data needed to update a comprador.
     */
    data: XOR<compradorUpdateInput, compradorUncheckedUpdateInput>
    /**
     * Choose, which comprador to update.
     */
    where: compradorWhereUniqueInput
  }


  /**
   * comprador updateMany
   */
  export type compradorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update compradors.
     */
    data: XOR<compradorUpdateManyMutationInput, compradorUncheckedUpdateManyInput>
    /**
     * Filter which compradors to update
     */
    where?: compradorWhereInput
  }


  /**
   * comprador upsert
   */
  export type compradorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comprador
     */
    select?: compradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compradorInclude<ExtArgs> | null
    /**
     * The filter to search for the comprador to update in case it exists.
     */
    where: compradorWhereUniqueInput
    /**
     * In case the comprador found by the `where` argument doesn't exist, create a new comprador with this data.
     */
    create: XOR<compradorCreateInput, compradorUncheckedCreateInput>
    /**
     * In case the comprador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<compradorUpdateInput, compradorUncheckedUpdateInput>
  }


  /**
   * comprador delete
   */
  export type compradorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comprador
     */
    select?: compradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compradorInclude<ExtArgs> | null
    /**
     * Filter which comprador to delete.
     */
    where: compradorWhereUniqueInput
  }


  /**
   * comprador deleteMany
   */
  export type compradorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which compradors to delete
     */
    where?: compradorWhereInput
  }


  /**
   * comprador.Carrito
   */
  export type comprador$CarritoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carrito
     */
    select?: carritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carritoInclude<ExtArgs> | null
    where?: carritoWhereInput
    orderBy?: carritoOrderByWithRelationInput | carritoOrderByWithRelationInput[]
    cursor?: carritoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarritoScalarFieldEnum | CarritoScalarFieldEnum[]
  }


  /**
   * comprador.Transaccion
   */
  export type comprador$TransaccionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaccion
     */
    select?: transaccionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: transaccionInclude<ExtArgs> | null
    where?: transaccionWhereInput
    orderBy?: transaccionOrderByWithRelationInput | transaccionOrderByWithRelationInput[]
    cursor?: transaccionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransaccionScalarFieldEnum | TransaccionScalarFieldEnum[]
  }


  /**
   * comprador without action
   */
  export type compradorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comprador
     */
    select?: compradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compradorInclude<ExtArgs> | null
  }



  /**
   * Model producto
   */

  export type AggregateProducto = {
    _count: ProductoCountAggregateOutputType | null
    _avg: ProductoAvgAggregateOutputType | null
    _sum: ProductoSumAggregateOutputType | null
    _min: ProductoMinAggregateOutputType | null
    _max: ProductoMaxAggregateOutputType | null
  }

  export type ProductoAvgAggregateOutputType = {
    id_producto: number | null
    precio_prod: number | null
    ID_Artesano: number | null
    ID_Categoria: number | null
  }

  export type ProductoSumAggregateOutputType = {
    id_producto: number | null
    precio_prod: number | null
    ID_Artesano: number | null
    ID_Categoria: number | null
  }

  export type ProductoMinAggregateOutputType = {
    id_producto: number | null
    nombre_prod: string | null
    descripcion_prod: string | null
    categoria: string | null
    precio_prod: number | null
    ID_Artesano: number | null
    ID_Categoria: number | null
  }

  export type ProductoMaxAggregateOutputType = {
    id_producto: number | null
    nombre_prod: string | null
    descripcion_prod: string | null
    categoria: string | null
    precio_prod: number | null
    ID_Artesano: number | null
    ID_Categoria: number | null
  }

  export type ProductoCountAggregateOutputType = {
    id_producto: number
    nombre_prod: number
    descripcion_prod: number
    categoria: number
    precio_prod: number
    ID_Artesano: number
    ID_Categoria: number
    _all: number
  }


  export type ProductoAvgAggregateInputType = {
    id_producto?: true
    precio_prod?: true
    ID_Artesano?: true
    ID_Categoria?: true
  }

  export type ProductoSumAggregateInputType = {
    id_producto?: true
    precio_prod?: true
    ID_Artesano?: true
    ID_Categoria?: true
  }

  export type ProductoMinAggregateInputType = {
    id_producto?: true
    nombre_prod?: true
    descripcion_prod?: true
    categoria?: true
    precio_prod?: true
    ID_Artesano?: true
    ID_Categoria?: true
  }

  export type ProductoMaxAggregateInputType = {
    id_producto?: true
    nombre_prod?: true
    descripcion_prod?: true
    categoria?: true
    precio_prod?: true
    ID_Artesano?: true
    ID_Categoria?: true
  }

  export type ProductoCountAggregateInputType = {
    id_producto?: true
    nombre_prod?: true
    descripcion_prod?: true
    categoria?: true
    precio_prod?: true
    ID_Artesano?: true
    ID_Categoria?: true
    _all?: true
  }

  export type ProductoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which producto to aggregate.
     */
    where?: productoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productos to fetch.
     */
    orderBy?: productoOrderByWithRelationInput | productoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned productos
    **/
    _count?: true | ProductoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductoMaxAggregateInputType
  }

  export type GetProductoAggregateType<T extends ProductoAggregateArgs> = {
        [P in keyof T & keyof AggregateProducto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducto[P]>
      : GetScalarType<T[P], AggregateProducto[P]>
  }




  export type productoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productoWhereInput
    orderBy?: productoOrderByWithAggregationInput | productoOrderByWithAggregationInput[]
    by: ProductoScalarFieldEnum[] | ProductoScalarFieldEnum
    having?: productoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductoCountAggregateInputType | true
    _avg?: ProductoAvgAggregateInputType
    _sum?: ProductoSumAggregateInputType
    _min?: ProductoMinAggregateInputType
    _max?: ProductoMaxAggregateInputType
  }

  export type ProductoGroupByOutputType = {
    id_producto: number
    nombre_prod: string | null
    descripcion_prod: string
    categoria: string
    precio_prod: number | null
    ID_Artesano: number
    ID_Categoria: number
    _count: ProductoCountAggregateOutputType | null
    _avg: ProductoAvgAggregateOutputType | null
    _sum: ProductoSumAggregateOutputType | null
    _min: ProductoMinAggregateOutputType | null
    _max: ProductoMaxAggregateOutputType | null
  }

  type GetProductoGroupByPayload<T extends productoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductoGroupByOutputType[P]>
            : GetScalarType<T[P], ProductoGroupByOutputType[P]>
        }
      >
    >


  export type productoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_producto?: boolean
    nombre_prod?: boolean
    descripcion_prod?: boolean
    categoria?: boolean
    precio_prod?: boolean
    ID_Artesano?: boolean
    ID_Categoria?: boolean
    artesano?: boolean | artesanoDefaultArgs<ExtArgs>
    UserCategoria?: boolean | categoriaDefaultArgs<ExtArgs>
    Transaccion?: boolean | producto$TransaccionArgs<ExtArgs>
    _count?: boolean | ProductoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["producto"]>

  export type productoSelectScalar = {
    id_producto?: boolean
    nombre_prod?: boolean
    descripcion_prod?: boolean
    categoria?: boolean
    precio_prod?: boolean
    ID_Artesano?: boolean
    ID_Categoria?: boolean
  }

  export type productoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artesano?: boolean | artesanoDefaultArgs<ExtArgs>
    UserCategoria?: boolean | categoriaDefaultArgs<ExtArgs>
    Transaccion?: boolean | producto$TransaccionArgs<ExtArgs>
    _count?: boolean | ProductoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $productoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "producto"
    objects: {
      artesano: Prisma.$artesanoPayload<ExtArgs>
      UserCategoria: Prisma.$categoriaPayload<ExtArgs>
      Transaccion: Prisma.$transaccionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_producto: number
      nombre_prod: string | null
      descripcion_prod: string
      categoria: string
      precio_prod: number | null
      ID_Artesano: number
      ID_Categoria: number
    }, ExtArgs["result"]["producto"]>
    composites: {}
  }


  type productoGetPayload<S extends boolean | null | undefined | productoDefaultArgs> = $Result.GetResult<Prisma.$productoPayload, S>

  type productoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<productoFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ProductoCountAggregateInputType | true
    }

  export interface productoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['producto'], meta: { name: 'producto' } }
    /**
     * Find zero or one Producto that matches the filter.
     * @param {productoFindUniqueArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, productoFindUniqueArgs<ExtArgs>>
    ): Prisma__productoClient<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Producto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {productoFindUniqueOrThrowArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__productoClient<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Producto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productoFindFirstArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, productoFindFirstArgs<ExtArgs>>
    ): Prisma__productoClient<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Producto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productoFindFirstOrThrowArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__productoClient<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Productos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Productos
     * const productos = await prisma.producto.findMany()
     * 
     * // Get first 10 Productos
     * const productos = await prisma.producto.findMany({ take: 10 })
     * 
     * // Only select the `id_producto`
     * const productoWithId_productoOnly = await prisma.producto.findMany({ select: { id_producto: true } })
     * 
    **/
    findMany<T extends productoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Producto.
     * @param {productoCreateArgs} args - Arguments to create a Producto.
     * @example
     * // Create one Producto
     * const Producto = await prisma.producto.create({
     *   data: {
     *     // ... data to create a Producto
     *   }
     * })
     * 
    **/
    create<T extends productoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, productoCreateArgs<ExtArgs>>
    ): Prisma__productoClient<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Productos.
     *     @param {productoCreateManyArgs} args - Arguments to create many Productos.
     *     @example
     *     // Create many Productos
     *     const producto = await prisma.producto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Producto.
     * @param {productoDeleteArgs} args - Arguments to delete one Producto.
     * @example
     * // Delete one Producto
     * const Producto = await prisma.producto.delete({
     *   where: {
     *     // ... filter to delete one Producto
     *   }
     * })
     * 
    **/
    delete<T extends productoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, productoDeleteArgs<ExtArgs>>
    ): Prisma__productoClient<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Producto.
     * @param {productoUpdateArgs} args - Arguments to update one Producto.
     * @example
     * // Update one Producto
     * const producto = await prisma.producto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, productoUpdateArgs<ExtArgs>>
    ): Prisma__productoClient<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Productos.
     * @param {productoDeleteManyArgs} args - Arguments to filter Productos to delete.
     * @example
     * // Delete a few Productos
     * const { count } = await prisma.producto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Productos
     * const producto = await prisma.producto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, productoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Producto.
     * @param {productoUpsertArgs} args - Arguments to update or create a Producto.
     * @example
     * // Update or create a Producto
     * const producto = await prisma.producto.upsert({
     *   create: {
     *     // ... data to create a Producto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Producto we want to update
     *   }
     * })
    **/
    upsert<T extends productoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, productoUpsertArgs<ExtArgs>>
    ): Prisma__productoClient<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productoCountArgs} args - Arguments to filter Productos to count.
     * @example
     * // Count the number of Productos
     * const count = await prisma.producto.count({
     *   where: {
     *     // ... the filter for the Productos we want to count
     *   }
     * })
    **/
    count<T extends productoCountArgs>(
      args?: Subset<T, productoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Producto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductoAggregateArgs>(args: Subset<T, ProductoAggregateArgs>): Prisma.PrismaPromise<GetProductoAggregateType<T>>

    /**
     * Group by Producto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productoGroupByArgs['orderBy'] }
        : { orderBy?: productoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the producto model
   */
  readonly fields: productoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for producto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    artesano<T extends artesanoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, artesanoDefaultArgs<ExtArgs>>): Prisma__artesanoClient<$Result.GetResult<Prisma.$artesanoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    UserCategoria<T extends categoriaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, categoriaDefaultArgs<ExtArgs>>): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Transaccion<T extends producto$TransaccionArgs<ExtArgs> = {}>(args?: Subset<T, producto$TransaccionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transaccionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the producto model
   */ 
  interface productoFieldRefs {
    readonly id_producto: FieldRef<"producto", 'Int'>
    readonly nombre_prod: FieldRef<"producto", 'String'>
    readonly descripcion_prod: FieldRef<"producto", 'String'>
    readonly categoria: FieldRef<"producto", 'String'>
    readonly precio_prod: FieldRef<"producto", 'Int'>
    readonly ID_Artesano: FieldRef<"producto", 'Int'>
    readonly ID_Categoria: FieldRef<"producto", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * producto findUnique
   */
  export type productoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    /**
     * Filter, which producto to fetch.
     */
    where: productoWhereUniqueInput
  }


  /**
   * producto findUniqueOrThrow
   */
  export type productoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    /**
     * Filter, which producto to fetch.
     */
    where: productoWhereUniqueInput
  }


  /**
   * producto findFirst
   */
  export type productoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    /**
     * Filter, which producto to fetch.
     */
    where?: productoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productos to fetch.
     */
    orderBy?: productoOrderByWithRelationInput | productoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productos.
     */
    cursor?: productoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productos.
     */
    distinct?: ProductoScalarFieldEnum | ProductoScalarFieldEnum[]
  }


  /**
   * producto findFirstOrThrow
   */
  export type productoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    /**
     * Filter, which producto to fetch.
     */
    where?: productoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productos to fetch.
     */
    orderBy?: productoOrderByWithRelationInput | productoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productos.
     */
    cursor?: productoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productos.
     */
    distinct?: ProductoScalarFieldEnum | ProductoScalarFieldEnum[]
  }


  /**
   * producto findMany
   */
  export type productoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    /**
     * Filter, which productos to fetch.
     */
    where?: productoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productos to fetch.
     */
    orderBy?: productoOrderByWithRelationInput | productoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing productos.
     */
    cursor?: productoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productos.
     */
    skip?: number
    distinct?: ProductoScalarFieldEnum | ProductoScalarFieldEnum[]
  }


  /**
   * producto create
   */
  export type productoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    /**
     * The data needed to create a producto.
     */
    data: XOR<productoCreateInput, productoUncheckedCreateInput>
  }


  /**
   * producto createMany
   */
  export type productoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many productos.
     */
    data: productoCreateManyInput | productoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * producto update
   */
  export type productoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    /**
     * The data needed to update a producto.
     */
    data: XOR<productoUpdateInput, productoUncheckedUpdateInput>
    /**
     * Choose, which producto to update.
     */
    where: productoWhereUniqueInput
  }


  /**
   * producto updateMany
   */
  export type productoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update productos.
     */
    data: XOR<productoUpdateManyMutationInput, productoUncheckedUpdateManyInput>
    /**
     * Filter which productos to update
     */
    where?: productoWhereInput
  }


  /**
   * producto upsert
   */
  export type productoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    /**
     * The filter to search for the producto to update in case it exists.
     */
    where: productoWhereUniqueInput
    /**
     * In case the producto found by the `where` argument doesn't exist, create a new producto with this data.
     */
    create: XOR<productoCreateInput, productoUncheckedCreateInput>
    /**
     * In case the producto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productoUpdateInput, productoUncheckedUpdateInput>
  }


  /**
   * producto delete
   */
  export type productoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    /**
     * Filter which producto to delete.
     */
    where: productoWhereUniqueInput
  }


  /**
   * producto deleteMany
   */
  export type productoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which productos to delete
     */
    where?: productoWhereInput
  }


  /**
   * producto.Transaccion
   */
  export type producto$TransaccionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaccion
     */
    select?: transaccionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: transaccionInclude<ExtArgs> | null
    where?: transaccionWhereInput
    orderBy?: transaccionOrderByWithRelationInput | transaccionOrderByWithRelationInput[]
    cursor?: transaccionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransaccionScalarFieldEnum | TransaccionScalarFieldEnum[]
  }


  /**
   * producto without action
   */
  export type productoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
  }



  /**
   * Model transaccion
   */

  export type AggregateTransaccion = {
    _count: TransaccionCountAggregateOutputType | null
    _avg: TransaccionAvgAggregateOutputType | null
    _sum: TransaccionSumAggregateOutputType | null
    _min: TransaccionMinAggregateOutputType | null
    _max: TransaccionMaxAggregateOutputType | null
  }

  export type TransaccionAvgAggregateOutputType = {
    id_transaccion: number | null
    cantidad_trans: number | null
    ID_Comprador: number | null
    ID_Producto: number | null
  }

  export type TransaccionSumAggregateOutputType = {
    id_transaccion: number | null
    cantidad_trans: number | null
    ID_Comprador: number | null
    ID_Producto: number | null
  }

  export type TransaccionMinAggregateOutputType = {
    id_transaccion: number | null
    cantidad_trans: number | null
    fecha_trans: Date | null
    ID_Comprador: number | null
    ID_Producto: number | null
  }

  export type TransaccionMaxAggregateOutputType = {
    id_transaccion: number | null
    cantidad_trans: number | null
    fecha_trans: Date | null
    ID_Comprador: number | null
    ID_Producto: number | null
  }

  export type TransaccionCountAggregateOutputType = {
    id_transaccion: number
    cantidad_trans: number
    fecha_trans: number
    ID_Comprador: number
    ID_Producto: number
    _all: number
  }


  export type TransaccionAvgAggregateInputType = {
    id_transaccion?: true
    cantidad_trans?: true
    ID_Comprador?: true
    ID_Producto?: true
  }

  export type TransaccionSumAggregateInputType = {
    id_transaccion?: true
    cantidad_trans?: true
    ID_Comprador?: true
    ID_Producto?: true
  }

  export type TransaccionMinAggregateInputType = {
    id_transaccion?: true
    cantidad_trans?: true
    fecha_trans?: true
    ID_Comprador?: true
    ID_Producto?: true
  }

  export type TransaccionMaxAggregateInputType = {
    id_transaccion?: true
    cantidad_trans?: true
    fecha_trans?: true
    ID_Comprador?: true
    ID_Producto?: true
  }

  export type TransaccionCountAggregateInputType = {
    id_transaccion?: true
    cantidad_trans?: true
    fecha_trans?: true
    ID_Comprador?: true
    ID_Producto?: true
    _all?: true
  }

  export type TransaccionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transaccion to aggregate.
     */
    where?: transaccionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transaccions to fetch.
     */
    orderBy?: transaccionOrderByWithRelationInput | transaccionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: transaccionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transaccions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transaccions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned transaccions
    **/
    _count?: true | TransaccionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransaccionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransaccionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransaccionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransaccionMaxAggregateInputType
  }

  export type GetTransaccionAggregateType<T extends TransaccionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaccion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaccion[P]>
      : GetScalarType<T[P], AggregateTransaccion[P]>
  }




  export type transaccionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transaccionWhereInput
    orderBy?: transaccionOrderByWithAggregationInput | transaccionOrderByWithAggregationInput[]
    by: TransaccionScalarFieldEnum[] | TransaccionScalarFieldEnum
    having?: transaccionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransaccionCountAggregateInputType | true
    _avg?: TransaccionAvgAggregateInputType
    _sum?: TransaccionSumAggregateInputType
    _min?: TransaccionMinAggregateInputType
    _max?: TransaccionMaxAggregateInputType
  }

  export type TransaccionGroupByOutputType = {
    id_transaccion: number
    cantidad_trans: number | null
    fecha_trans: Date
    ID_Comprador: number
    ID_Producto: number
    _count: TransaccionCountAggregateOutputType | null
    _avg: TransaccionAvgAggregateOutputType | null
    _sum: TransaccionSumAggregateOutputType | null
    _min: TransaccionMinAggregateOutputType | null
    _max: TransaccionMaxAggregateOutputType | null
  }

  type GetTransaccionGroupByPayload<T extends transaccionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransaccionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransaccionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransaccionGroupByOutputType[P]>
            : GetScalarType<T[P], TransaccionGroupByOutputType[P]>
        }
      >
    >


  export type transaccionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_transaccion?: boolean
    cantidad_trans?: boolean
    fecha_trans?: boolean
    ID_Comprador?: boolean
    ID_Producto?: boolean
    Comprador?: boolean | compradorDefaultArgs<ExtArgs>
    producto?: boolean | productoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaccion"]>

  export type transaccionSelectScalar = {
    id_transaccion?: boolean
    cantidad_trans?: boolean
    fecha_trans?: boolean
    ID_Comprador?: boolean
    ID_Producto?: boolean
  }

  export type transaccionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Comprador?: boolean | compradorDefaultArgs<ExtArgs>
    producto?: boolean | productoDefaultArgs<ExtArgs>
  }


  export type $transaccionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "transaccion"
    objects: {
      Comprador: Prisma.$compradorPayload<ExtArgs>
      producto: Prisma.$productoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_transaccion: number
      cantidad_trans: number | null
      fecha_trans: Date
      ID_Comprador: number
      ID_Producto: number
    }, ExtArgs["result"]["transaccion"]>
    composites: {}
  }


  type transaccionGetPayload<S extends boolean | null | undefined | transaccionDefaultArgs> = $Result.GetResult<Prisma.$transaccionPayload, S>

  type transaccionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<transaccionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: TransaccionCountAggregateInputType | true
    }

  export interface transaccionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['transaccion'], meta: { name: 'transaccion' } }
    /**
     * Find zero or one Transaccion that matches the filter.
     * @param {transaccionFindUniqueArgs} args - Arguments to find a Transaccion
     * @example
     * // Get one Transaccion
     * const transaccion = await prisma.transaccion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends transaccionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, transaccionFindUniqueArgs<ExtArgs>>
    ): Prisma__transaccionClient<$Result.GetResult<Prisma.$transaccionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Transaccion that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {transaccionFindUniqueOrThrowArgs} args - Arguments to find a Transaccion
     * @example
     * // Get one Transaccion
     * const transaccion = await prisma.transaccion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends transaccionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, transaccionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__transaccionClient<$Result.GetResult<Prisma.$transaccionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Transaccion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transaccionFindFirstArgs} args - Arguments to find a Transaccion
     * @example
     * // Get one Transaccion
     * const transaccion = await prisma.transaccion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends transaccionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, transaccionFindFirstArgs<ExtArgs>>
    ): Prisma__transaccionClient<$Result.GetResult<Prisma.$transaccionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Transaccion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transaccionFindFirstOrThrowArgs} args - Arguments to find a Transaccion
     * @example
     * // Get one Transaccion
     * const transaccion = await prisma.transaccion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends transaccionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, transaccionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__transaccionClient<$Result.GetResult<Prisma.$transaccionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Transaccions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transaccionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transaccions
     * const transaccions = await prisma.transaccion.findMany()
     * 
     * // Get first 10 Transaccions
     * const transaccions = await prisma.transaccion.findMany({ take: 10 })
     * 
     * // Only select the `id_transaccion`
     * const transaccionWithId_transaccionOnly = await prisma.transaccion.findMany({ select: { id_transaccion: true } })
     * 
    **/
    findMany<T extends transaccionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, transaccionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transaccionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Transaccion.
     * @param {transaccionCreateArgs} args - Arguments to create a Transaccion.
     * @example
     * // Create one Transaccion
     * const Transaccion = await prisma.transaccion.create({
     *   data: {
     *     // ... data to create a Transaccion
     *   }
     * })
     * 
    **/
    create<T extends transaccionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, transaccionCreateArgs<ExtArgs>>
    ): Prisma__transaccionClient<$Result.GetResult<Prisma.$transaccionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Transaccions.
     *     @param {transaccionCreateManyArgs} args - Arguments to create many Transaccions.
     *     @example
     *     // Create many Transaccions
     *     const transaccion = await prisma.transaccion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends transaccionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, transaccionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Transaccion.
     * @param {transaccionDeleteArgs} args - Arguments to delete one Transaccion.
     * @example
     * // Delete one Transaccion
     * const Transaccion = await prisma.transaccion.delete({
     *   where: {
     *     // ... filter to delete one Transaccion
     *   }
     * })
     * 
    **/
    delete<T extends transaccionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, transaccionDeleteArgs<ExtArgs>>
    ): Prisma__transaccionClient<$Result.GetResult<Prisma.$transaccionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Transaccion.
     * @param {transaccionUpdateArgs} args - Arguments to update one Transaccion.
     * @example
     * // Update one Transaccion
     * const transaccion = await prisma.transaccion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends transaccionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, transaccionUpdateArgs<ExtArgs>>
    ): Prisma__transaccionClient<$Result.GetResult<Prisma.$transaccionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Transaccions.
     * @param {transaccionDeleteManyArgs} args - Arguments to filter Transaccions to delete.
     * @example
     * // Delete a few Transaccions
     * const { count } = await prisma.transaccion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends transaccionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, transaccionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transaccions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transaccionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transaccions
     * const transaccion = await prisma.transaccion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends transaccionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, transaccionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaccion.
     * @param {transaccionUpsertArgs} args - Arguments to update or create a Transaccion.
     * @example
     * // Update or create a Transaccion
     * const transaccion = await prisma.transaccion.upsert({
     *   create: {
     *     // ... data to create a Transaccion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaccion we want to update
     *   }
     * })
    **/
    upsert<T extends transaccionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, transaccionUpsertArgs<ExtArgs>>
    ): Prisma__transaccionClient<$Result.GetResult<Prisma.$transaccionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Transaccions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transaccionCountArgs} args - Arguments to filter Transaccions to count.
     * @example
     * // Count the number of Transaccions
     * const count = await prisma.transaccion.count({
     *   where: {
     *     // ... the filter for the Transaccions we want to count
     *   }
     * })
    **/
    count<T extends transaccionCountArgs>(
      args?: Subset<T, transaccionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransaccionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaccion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaccionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransaccionAggregateArgs>(args: Subset<T, TransaccionAggregateArgs>): Prisma.PrismaPromise<GetTransaccionAggregateType<T>>

    /**
     * Group by Transaccion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transaccionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends transaccionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: transaccionGroupByArgs['orderBy'] }
        : { orderBy?: transaccionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, transaccionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransaccionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the transaccion model
   */
  readonly fields: transaccionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for transaccion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__transaccionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Comprador<T extends compradorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, compradorDefaultArgs<ExtArgs>>): Prisma__compradorClient<$Result.GetResult<Prisma.$compradorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    producto<T extends productoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productoDefaultArgs<ExtArgs>>): Prisma__productoClient<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the transaccion model
   */ 
  interface transaccionFieldRefs {
    readonly id_transaccion: FieldRef<"transaccion", 'Int'>
    readonly cantidad_trans: FieldRef<"transaccion", 'Int'>
    readonly fecha_trans: FieldRef<"transaccion", 'DateTime'>
    readonly ID_Comprador: FieldRef<"transaccion", 'Int'>
    readonly ID_Producto: FieldRef<"transaccion", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * transaccion findUnique
   */
  export type transaccionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaccion
     */
    select?: transaccionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: transaccionInclude<ExtArgs> | null
    /**
     * Filter, which transaccion to fetch.
     */
    where: transaccionWhereUniqueInput
  }


  /**
   * transaccion findUniqueOrThrow
   */
  export type transaccionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaccion
     */
    select?: transaccionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: transaccionInclude<ExtArgs> | null
    /**
     * Filter, which transaccion to fetch.
     */
    where: transaccionWhereUniqueInput
  }


  /**
   * transaccion findFirst
   */
  export type transaccionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaccion
     */
    select?: transaccionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: transaccionInclude<ExtArgs> | null
    /**
     * Filter, which transaccion to fetch.
     */
    where?: transaccionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transaccions to fetch.
     */
    orderBy?: transaccionOrderByWithRelationInput | transaccionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transaccions.
     */
    cursor?: transaccionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transaccions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transaccions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transaccions.
     */
    distinct?: TransaccionScalarFieldEnum | TransaccionScalarFieldEnum[]
  }


  /**
   * transaccion findFirstOrThrow
   */
  export type transaccionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaccion
     */
    select?: transaccionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: transaccionInclude<ExtArgs> | null
    /**
     * Filter, which transaccion to fetch.
     */
    where?: transaccionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transaccions to fetch.
     */
    orderBy?: transaccionOrderByWithRelationInput | transaccionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transaccions.
     */
    cursor?: transaccionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transaccions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transaccions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transaccions.
     */
    distinct?: TransaccionScalarFieldEnum | TransaccionScalarFieldEnum[]
  }


  /**
   * transaccion findMany
   */
  export type transaccionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaccion
     */
    select?: transaccionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: transaccionInclude<ExtArgs> | null
    /**
     * Filter, which transaccions to fetch.
     */
    where?: transaccionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transaccions to fetch.
     */
    orderBy?: transaccionOrderByWithRelationInput | transaccionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing transaccions.
     */
    cursor?: transaccionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transaccions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transaccions.
     */
    skip?: number
    distinct?: TransaccionScalarFieldEnum | TransaccionScalarFieldEnum[]
  }


  /**
   * transaccion create
   */
  export type transaccionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaccion
     */
    select?: transaccionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: transaccionInclude<ExtArgs> | null
    /**
     * The data needed to create a transaccion.
     */
    data: XOR<transaccionCreateInput, transaccionUncheckedCreateInput>
  }


  /**
   * transaccion createMany
   */
  export type transaccionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many transaccions.
     */
    data: transaccionCreateManyInput | transaccionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * transaccion update
   */
  export type transaccionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaccion
     */
    select?: transaccionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: transaccionInclude<ExtArgs> | null
    /**
     * The data needed to update a transaccion.
     */
    data: XOR<transaccionUpdateInput, transaccionUncheckedUpdateInput>
    /**
     * Choose, which transaccion to update.
     */
    where: transaccionWhereUniqueInput
  }


  /**
   * transaccion updateMany
   */
  export type transaccionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update transaccions.
     */
    data: XOR<transaccionUpdateManyMutationInput, transaccionUncheckedUpdateManyInput>
    /**
     * Filter which transaccions to update
     */
    where?: transaccionWhereInput
  }


  /**
   * transaccion upsert
   */
  export type transaccionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaccion
     */
    select?: transaccionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: transaccionInclude<ExtArgs> | null
    /**
     * The filter to search for the transaccion to update in case it exists.
     */
    where: transaccionWhereUniqueInput
    /**
     * In case the transaccion found by the `where` argument doesn't exist, create a new transaccion with this data.
     */
    create: XOR<transaccionCreateInput, transaccionUncheckedCreateInput>
    /**
     * In case the transaccion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<transaccionUpdateInput, transaccionUncheckedUpdateInput>
  }


  /**
   * transaccion delete
   */
  export type transaccionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaccion
     */
    select?: transaccionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: transaccionInclude<ExtArgs> | null
    /**
     * Filter which transaccion to delete.
     */
    where: transaccionWhereUniqueInput
  }


  /**
   * transaccion deleteMany
   */
  export type transaccionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transaccions to delete
     */
    where?: transaccionWhereInput
  }


  /**
   * transaccion without action
   */
  export type transaccionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaccion
     */
    select?: transaccionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: transaccionInclude<ExtArgs> | null
  }



  /**
   * Model usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id_usuario: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id_usuario: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id_usuario: number | null
    nombre_usu: string | null
    apellido_usu: string | null
    email_usu: string | null
    password_usu: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id_usuario: number | null
    nombre_usu: string | null
    apellido_usu: string | null
    email_usu: string | null
    password_usu: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id_usuario: number
    nombre_usu: number
    apellido_usu: number
    email_usu: number
    password_usu: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id_usuario?: true
  }

  export type UsuarioSumAggregateInputType = {
    id_usuario?: true
  }

  export type UsuarioMinAggregateInputType = {
    id_usuario?: true
    nombre_usu?: true
    apellido_usu?: true
    email_usu?: true
    password_usu?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id_usuario?: true
    nombre_usu?: true
    apellido_usu?: true
    email_usu?: true
    password_usu?: true
  }

  export type UsuarioCountAggregateInputType = {
    id_usuario?: true
    nombre_usu?: true
    apellido_usu?: true
    email_usu?: true
    password_usu?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuario to aggregate.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type usuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuarioWhereInput
    orderBy?: usuarioOrderByWithAggregationInput | usuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: usuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id_usuario: number
    nombre_usu: string | null
    apellido_usu: string
    email_usu: string
    password_usu: string | null
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends usuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type usuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_usuario?: boolean
    nombre_usu?: boolean
    apellido_usu?: boolean
    email_usu?: boolean
    password_usu?: boolean
    Artesano?: boolean | usuario$ArtesanoArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type usuarioSelectScalar = {
    id_usuario?: boolean
    nombre_usu?: boolean
    apellido_usu?: boolean
    email_usu?: boolean
    password_usu?: boolean
  }

  export type usuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Artesano?: boolean | usuario$ArtesanoArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $usuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usuario"
    objects: {
      Artesano: Prisma.$artesanoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_usuario: number
      nombre_usu: string | null
      apellido_usu: string
      email_usu: string
      password_usu: string | null
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }


  type usuarioGetPayload<S extends boolean | null | undefined | usuarioDefaultArgs> = $Result.GetResult<Prisma.$usuarioPayload, S>

  type usuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usuarioFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface usuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usuario'], meta: { name: 'usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {usuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usuarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioFindUniqueArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usuarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usuarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindFirstArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usuarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id_usuario`
     * const usuarioWithId_usuarioOnly = await prisma.usuario.findMany({ select: { id_usuario: true } })
     * 
    **/
    findMany<T extends usuarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Usuario.
     * @param {usuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends usuarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioCreateArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Usuarios.
     *     @param {usuarioCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuario = await prisma.usuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usuarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {usuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends usuarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioDeleteArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {usuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usuarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpdateArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {usuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usuarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usuarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {usuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends usuarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpsertArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuarioCountArgs>(
      args?: Subset<T, usuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usuarioGroupByArgs['orderBy'] }
        : { orderBy?: usuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usuario model
   */
  readonly fields: usuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Artesano<T extends usuario$ArtesanoArgs<ExtArgs> = {}>(args?: Subset<T, usuario$ArtesanoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$artesanoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the usuario model
   */ 
  interface usuarioFieldRefs {
    readonly id_usuario: FieldRef<"usuario", 'Int'>
    readonly nombre_usu: FieldRef<"usuario", 'String'>
    readonly apellido_usu: FieldRef<"usuario", 'String'>
    readonly email_usu: FieldRef<"usuario", 'String'>
    readonly password_usu: FieldRef<"usuario", 'String'>
  }
    

  // Custom InputTypes

  /**
   * usuario findUnique
   */
  export type usuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario findUniqueOrThrow
   */
  export type usuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario findFirst
   */
  export type usuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * usuario findFirstOrThrow
   */
  export type usuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * usuario findMany
   */
  export type usuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * usuario create
   */
  export type usuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a usuario.
     */
    data: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
  }


  /**
   * usuario createMany
   */
  export type usuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usuarios.
     */
    data: usuarioCreateManyInput | usuarioCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * usuario update
   */
  export type usuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a usuario.
     */
    data: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
    /**
     * Choose, which usuario to update.
     */
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario updateMany
   */
  export type usuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuarioUpdateManyMutationInput, usuarioUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuarioWhereInput
  }


  /**
   * usuario upsert
   */
  export type usuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the usuario to update in case it exists.
     */
    where: usuarioWhereUniqueInput
    /**
     * In case the usuario found by the `where` argument doesn't exist, create a new usuario with this data.
     */
    create: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
    /**
     * In case the usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
  }


  /**
   * usuario delete
   */
  export type usuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter which usuario to delete.
     */
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario deleteMany
   */
  export type usuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to delete
     */
    where?: usuarioWhereInput
  }


  /**
   * usuario.Artesano
   */
  export type usuario$ArtesanoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artesano
     */
    select?: artesanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: artesanoInclude<ExtArgs> | null
    where?: artesanoWhereInput
    orderBy?: artesanoOrderByWithRelationInput | artesanoOrderByWithRelationInput[]
    cursor?: artesanoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtesanoScalarFieldEnum | ArtesanoScalarFieldEnum[]
  }


  /**
   * usuario without action
   */
  export type usuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
  }



  /**
   * Model artesano
   */

  export type AggregateArtesano = {
    _count: ArtesanoCountAggregateOutputType | null
    _avg: ArtesanoAvgAggregateOutputType | null
    _sum: ArtesanoSumAggregateOutputType | null
    _min: ArtesanoMinAggregateOutputType | null
    _max: ArtesanoMaxAggregateOutputType | null
  }

  export type ArtesanoAvgAggregateOutputType = {
    id_artesano: number | null
  }

  export type ArtesanoSumAggregateOutputType = {
    id_artesano: number | null
  }

  export type ArtesanoMinAggregateOutputType = {
    id_artesano: number | null
    descripcion_art: string | null
    ubicacion_art: string | null
    telefono_art: string | null
    nombre_art: string | null
  }

  export type ArtesanoMaxAggregateOutputType = {
    id_artesano: number | null
    descripcion_art: string | null
    ubicacion_art: string | null
    telefono_art: string | null
    nombre_art: string | null
  }

  export type ArtesanoCountAggregateOutputType = {
    id_artesano: number
    descripcion_art: number
    ubicacion_art: number
    telefono_art: number
    nombre_art: number
    _all: number
  }


  export type ArtesanoAvgAggregateInputType = {
    id_artesano?: true
  }

  export type ArtesanoSumAggregateInputType = {
    id_artesano?: true
  }

  export type ArtesanoMinAggregateInputType = {
    id_artesano?: true
    descripcion_art?: true
    ubicacion_art?: true
    telefono_art?: true
    nombre_art?: true
  }

  export type ArtesanoMaxAggregateInputType = {
    id_artesano?: true
    descripcion_art?: true
    ubicacion_art?: true
    telefono_art?: true
    nombre_art?: true
  }

  export type ArtesanoCountAggregateInputType = {
    id_artesano?: true
    descripcion_art?: true
    ubicacion_art?: true
    telefono_art?: true
    nombre_art?: true
    _all?: true
  }

  export type ArtesanoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which artesano to aggregate.
     */
    where?: artesanoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artesanos to fetch.
     */
    orderBy?: artesanoOrderByWithRelationInput | artesanoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: artesanoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artesanos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artesanos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned artesanos
    **/
    _count?: true | ArtesanoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtesanoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtesanoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtesanoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtesanoMaxAggregateInputType
  }

  export type GetArtesanoAggregateType<T extends ArtesanoAggregateArgs> = {
        [P in keyof T & keyof AggregateArtesano]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtesano[P]>
      : GetScalarType<T[P], AggregateArtesano[P]>
  }




  export type artesanoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: artesanoWhereInput
    orderBy?: artesanoOrderByWithAggregationInput | artesanoOrderByWithAggregationInput[]
    by: ArtesanoScalarFieldEnum[] | ArtesanoScalarFieldEnum
    having?: artesanoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtesanoCountAggregateInputType | true
    _avg?: ArtesanoAvgAggregateInputType
    _sum?: ArtesanoSumAggregateInputType
    _min?: ArtesanoMinAggregateInputType
    _max?: ArtesanoMaxAggregateInputType
  }

  export type ArtesanoGroupByOutputType = {
    id_artesano: number
    descripcion_art: string
    ubicacion_art: string
    telefono_art: string
    nombre_art: string | null
    _count: ArtesanoCountAggregateOutputType | null
    _avg: ArtesanoAvgAggregateOutputType | null
    _sum: ArtesanoSumAggregateOutputType | null
    _min: ArtesanoMinAggregateOutputType | null
    _max: ArtesanoMaxAggregateOutputType | null
  }

  type GetArtesanoGroupByPayload<T extends artesanoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArtesanoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtesanoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtesanoGroupByOutputType[P]>
            : GetScalarType<T[P], ArtesanoGroupByOutputType[P]>
        }
      >
    >


  export type artesanoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_artesano?: boolean
    descripcion_art?: boolean
    ubicacion_art?: boolean
    telefono_art?: boolean
    nombre_art?: boolean
    Productos?: boolean | artesano$ProductosArgs<ExtArgs>
    Usuario?: boolean | artesano$UsuarioArgs<ExtArgs>
    _count?: boolean | ArtesanoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["artesano"]>

  export type artesanoSelectScalar = {
    id_artesano?: boolean
    descripcion_art?: boolean
    ubicacion_art?: boolean
    telefono_art?: boolean
    nombre_art?: boolean
  }

  export type artesanoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Productos?: boolean | artesano$ProductosArgs<ExtArgs>
    Usuario?: boolean | artesano$UsuarioArgs<ExtArgs>
    _count?: boolean | ArtesanoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $artesanoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "artesano"
    objects: {
      Productos: Prisma.$productoPayload<ExtArgs>[]
      Usuario: Prisma.$usuarioPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_artesano: number
      descripcion_art: string
      ubicacion_art: string
      telefono_art: string
      nombre_art: string | null
    }, ExtArgs["result"]["artesano"]>
    composites: {}
  }


  type artesanoGetPayload<S extends boolean | null | undefined | artesanoDefaultArgs> = $Result.GetResult<Prisma.$artesanoPayload, S>

  type artesanoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<artesanoFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ArtesanoCountAggregateInputType | true
    }

  export interface artesanoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['artesano'], meta: { name: 'artesano' } }
    /**
     * Find zero or one Artesano that matches the filter.
     * @param {artesanoFindUniqueArgs} args - Arguments to find a Artesano
     * @example
     * // Get one Artesano
     * const artesano = await prisma.artesano.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends artesanoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, artesanoFindUniqueArgs<ExtArgs>>
    ): Prisma__artesanoClient<$Result.GetResult<Prisma.$artesanoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Artesano that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {artesanoFindUniqueOrThrowArgs} args - Arguments to find a Artesano
     * @example
     * // Get one Artesano
     * const artesano = await prisma.artesano.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends artesanoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, artesanoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__artesanoClient<$Result.GetResult<Prisma.$artesanoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Artesano that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artesanoFindFirstArgs} args - Arguments to find a Artesano
     * @example
     * // Get one Artesano
     * const artesano = await prisma.artesano.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends artesanoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, artesanoFindFirstArgs<ExtArgs>>
    ): Prisma__artesanoClient<$Result.GetResult<Prisma.$artesanoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Artesano that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artesanoFindFirstOrThrowArgs} args - Arguments to find a Artesano
     * @example
     * // Get one Artesano
     * const artesano = await prisma.artesano.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends artesanoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, artesanoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__artesanoClient<$Result.GetResult<Prisma.$artesanoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Artesanos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artesanoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Artesanos
     * const artesanos = await prisma.artesano.findMany()
     * 
     * // Get first 10 Artesanos
     * const artesanos = await prisma.artesano.findMany({ take: 10 })
     * 
     * // Only select the `id_artesano`
     * const artesanoWithId_artesanoOnly = await prisma.artesano.findMany({ select: { id_artesano: true } })
     * 
    **/
    findMany<T extends artesanoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, artesanoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$artesanoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Artesano.
     * @param {artesanoCreateArgs} args - Arguments to create a Artesano.
     * @example
     * // Create one Artesano
     * const Artesano = await prisma.artesano.create({
     *   data: {
     *     // ... data to create a Artesano
     *   }
     * })
     * 
    **/
    create<T extends artesanoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, artesanoCreateArgs<ExtArgs>>
    ): Prisma__artesanoClient<$Result.GetResult<Prisma.$artesanoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Artesanos.
     *     @param {artesanoCreateManyArgs} args - Arguments to create many Artesanos.
     *     @example
     *     // Create many Artesanos
     *     const artesano = await prisma.artesano.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends artesanoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, artesanoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Artesano.
     * @param {artesanoDeleteArgs} args - Arguments to delete one Artesano.
     * @example
     * // Delete one Artesano
     * const Artesano = await prisma.artesano.delete({
     *   where: {
     *     // ... filter to delete one Artesano
     *   }
     * })
     * 
    **/
    delete<T extends artesanoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, artesanoDeleteArgs<ExtArgs>>
    ): Prisma__artesanoClient<$Result.GetResult<Prisma.$artesanoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Artesano.
     * @param {artesanoUpdateArgs} args - Arguments to update one Artesano.
     * @example
     * // Update one Artesano
     * const artesano = await prisma.artesano.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends artesanoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, artesanoUpdateArgs<ExtArgs>>
    ): Prisma__artesanoClient<$Result.GetResult<Prisma.$artesanoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Artesanos.
     * @param {artesanoDeleteManyArgs} args - Arguments to filter Artesanos to delete.
     * @example
     * // Delete a few Artesanos
     * const { count } = await prisma.artesano.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends artesanoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, artesanoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Artesanos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artesanoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Artesanos
     * const artesano = await prisma.artesano.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends artesanoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, artesanoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Artesano.
     * @param {artesanoUpsertArgs} args - Arguments to update or create a Artesano.
     * @example
     * // Update or create a Artesano
     * const artesano = await prisma.artesano.upsert({
     *   create: {
     *     // ... data to create a Artesano
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Artesano we want to update
     *   }
     * })
    **/
    upsert<T extends artesanoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, artesanoUpsertArgs<ExtArgs>>
    ): Prisma__artesanoClient<$Result.GetResult<Prisma.$artesanoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Artesanos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artesanoCountArgs} args - Arguments to filter Artesanos to count.
     * @example
     * // Count the number of Artesanos
     * const count = await prisma.artesano.count({
     *   where: {
     *     // ... the filter for the Artesanos we want to count
     *   }
     * })
    **/
    count<T extends artesanoCountArgs>(
      args?: Subset<T, artesanoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtesanoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Artesano.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtesanoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtesanoAggregateArgs>(args: Subset<T, ArtesanoAggregateArgs>): Prisma.PrismaPromise<GetArtesanoAggregateType<T>>

    /**
     * Group by Artesano.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artesanoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends artesanoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: artesanoGroupByArgs['orderBy'] }
        : { orderBy?: artesanoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, artesanoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtesanoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the artesano model
   */
  readonly fields: artesanoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for artesano.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__artesanoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Productos<T extends artesano$ProductosArgs<ExtArgs> = {}>(args?: Subset<T, artesano$ProductosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'findMany'> | Null>;

    Usuario<T extends artesano$UsuarioArgs<ExtArgs> = {}>(args?: Subset<T, artesano$UsuarioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the artesano model
   */ 
  interface artesanoFieldRefs {
    readonly id_artesano: FieldRef<"artesano", 'Int'>
    readonly descripcion_art: FieldRef<"artesano", 'String'>
    readonly ubicacion_art: FieldRef<"artesano", 'String'>
    readonly telefono_art: FieldRef<"artesano", 'String'>
    readonly nombre_art: FieldRef<"artesano", 'String'>
  }
    

  // Custom InputTypes

  /**
   * artesano findUnique
   */
  export type artesanoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artesano
     */
    select?: artesanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: artesanoInclude<ExtArgs> | null
    /**
     * Filter, which artesano to fetch.
     */
    where: artesanoWhereUniqueInput
  }


  /**
   * artesano findUniqueOrThrow
   */
  export type artesanoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artesano
     */
    select?: artesanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: artesanoInclude<ExtArgs> | null
    /**
     * Filter, which artesano to fetch.
     */
    where: artesanoWhereUniqueInput
  }


  /**
   * artesano findFirst
   */
  export type artesanoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artesano
     */
    select?: artesanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: artesanoInclude<ExtArgs> | null
    /**
     * Filter, which artesano to fetch.
     */
    where?: artesanoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artesanos to fetch.
     */
    orderBy?: artesanoOrderByWithRelationInput | artesanoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for artesanos.
     */
    cursor?: artesanoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artesanos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artesanos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of artesanos.
     */
    distinct?: ArtesanoScalarFieldEnum | ArtesanoScalarFieldEnum[]
  }


  /**
   * artesano findFirstOrThrow
   */
  export type artesanoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artesano
     */
    select?: artesanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: artesanoInclude<ExtArgs> | null
    /**
     * Filter, which artesano to fetch.
     */
    where?: artesanoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artesanos to fetch.
     */
    orderBy?: artesanoOrderByWithRelationInput | artesanoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for artesanos.
     */
    cursor?: artesanoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artesanos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artesanos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of artesanos.
     */
    distinct?: ArtesanoScalarFieldEnum | ArtesanoScalarFieldEnum[]
  }


  /**
   * artesano findMany
   */
  export type artesanoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artesano
     */
    select?: artesanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: artesanoInclude<ExtArgs> | null
    /**
     * Filter, which artesanos to fetch.
     */
    where?: artesanoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artesanos to fetch.
     */
    orderBy?: artesanoOrderByWithRelationInput | artesanoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing artesanos.
     */
    cursor?: artesanoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artesanos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artesanos.
     */
    skip?: number
    distinct?: ArtesanoScalarFieldEnum | ArtesanoScalarFieldEnum[]
  }


  /**
   * artesano create
   */
  export type artesanoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artesano
     */
    select?: artesanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: artesanoInclude<ExtArgs> | null
    /**
     * The data needed to create a artesano.
     */
    data: XOR<artesanoCreateInput, artesanoUncheckedCreateInput>
  }


  /**
   * artesano createMany
   */
  export type artesanoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many artesanos.
     */
    data: artesanoCreateManyInput | artesanoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * artesano update
   */
  export type artesanoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artesano
     */
    select?: artesanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: artesanoInclude<ExtArgs> | null
    /**
     * The data needed to update a artesano.
     */
    data: XOR<artesanoUpdateInput, artesanoUncheckedUpdateInput>
    /**
     * Choose, which artesano to update.
     */
    where: artesanoWhereUniqueInput
  }


  /**
   * artesano updateMany
   */
  export type artesanoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update artesanos.
     */
    data: XOR<artesanoUpdateManyMutationInput, artesanoUncheckedUpdateManyInput>
    /**
     * Filter which artesanos to update
     */
    where?: artesanoWhereInput
  }


  /**
   * artesano upsert
   */
  export type artesanoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artesano
     */
    select?: artesanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: artesanoInclude<ExtArgs> | null
    /**
     * The filter to search for the artesano to update in case it exists.
     */
    where: artesanoWhereUniqueInput
    /**
     * In case the artesano found by the `where` argument doesn't exist, create a new artesano with this data.
     */
    create: XOR<artesanoCreateInput, artesanoUncheckedCreateInput>
    /**
     * In case the artesano was found with the provided `where` argument, update it with this data.
     */
    update: XOR<artesanoUpdateInput, artesanoUncheckedUpdateInput>
  }


  /**
   * artesano delete
   */
  export type artesanoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artesano
     */
    select?: artesanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: artesanoInclude<ExtArgs> | null
    /**
     * Filter which artesano to delete.
     */
    where: artesanoWhereUniqueInput
  }


  /**
   * artesano deleteMany
   */
  export type artesanoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which artesanos to delete
     */
    where?: artesanoWhereInput
  }


  /**
   * artesano.Productos
   */
  export type artesano$ProductosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    where?: productoWhereInput
    orderBy?: productoOrderByWithRelationInput | productoOrderByWithRelationInput[]
    cursor?: productoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductoScalarFieldEnum | ProductoScalarFieldEnum[]
  }


  /**
   * artesano.Usuario
   */
  export type artesano$UsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    where?: usuarioWhereInput
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    cursor?: usuarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * artesano without action
   */
  export type artesanoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artesano
     */
    select?: artesanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: artesanoInclude<ExtArgs> | null
  }



  /**
   * Model categoria
   */

  export type AggregateCategoria = {
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  export type CategoriaAvgAggregateOutputType = {
    id_categoria: number | null
  }

  export type CategoriaSumAggregateOutputType = {
    id_categoria: number | null
  }

  export type CategoriaMinAggregateOutputType = {
    id_categoria: number | null
    nombre_cat: string | null
    descripcion_cat: string | null
  }

  export type CategoriaMaxAggregateOutputType = {
    id_categoria: number | null
    nombre_cat: string | null
    descripcion_cat: string | null
  }

  export type CategoriaCountAggregateOutputType = {
    id_categoria: number
    nombre_cat: number
    descripcion_cat: number
    _all: number
  }


  export type CategoriaAvgAggregateInputType = {
    id_categoria?: true
  }

  export type CategoriaSumAggregateInputType = {
    id_categoria?: true
  }

  export type CategoriaMinAggregateInputType = {
    id_categoria?: true
    nombre_cat?: true
    descripcion_cat?: true
  }

  export type CategoriaMaxAggregateInputType = {
    id_categoria?: true
    nombre_cat?: true
    descripcion_cat?: true
  }

  export type CategoriaCountAggregateInputType = {
    id_categoria?: true
    nombre_cat?: true
    descripcion_cat?: true
    _all?: true
  }

  export type CategoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categoria to aggregate.
     */
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriaOrderByWithRelationInput | categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categorias
    **/
    _count?: true | CategoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaMaxAggregateInputType
  }

  export type GetCategoriaAggregateType<T extends CategoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoria[P]>
      : GetScalarType<T[P], AggregateCategoria[P]>
  }




  export type categoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriaWhereInput
    orderBy?: categoriaOrderByWithAggregationInput | categoriaOrderByWithAggregationInput[]
    by: CategoriaScalarFieldEnum[] | CategoriaScalarFieldEnum
    having?: categoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaCountAggregateInputType | true
    _avg?: CategoriaAvgAggregateInputType
    _sum?: CategoriaSumAggregateInputType
    _min?: CategoriaMinAggregateInputType
    _max?: CategoriaMaxAggregateInputType
  }

  export type CategoriaGroupByOutputType = {
    id_categoria: number
    nombre_cat: string | null
    descripcion_cat: string
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  type GetCategoriaGroupByPayload<T extends categoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
        }
      >
    >


  export type categoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_categoria?: boolean
    nombre_cat?: boolean
    descripcion_cat?: boolean
    Productos?: boolean | categoria$ProductosArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoria"]>

  export type categoriaSelectScalar = {
    id_categoria?: boolean
    nombre_cat?: boolean
    descripcion_cat?: boolean
  }

  export type categoriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Productos?: boolean | categoria$ProductosArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $categoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "categoria"
    objects: {
      Productos: Prisma.$productoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_categoria: number
      nombre_cat: string | null
      descripcion_cat: string
    }, ExtArgs["result"]["categoria"]>
    composites: {}
  }


  type categoriaGetPayload<S extends boolean | null | undefined | categoriaDefaultArgs> = $Result.GetResult<Prisma.$categoriaPayload, S>

  type categoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<categoriaFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CategoriaCountAggregateInputType | true
    }

  export interface categoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categoria'], meta: { name: 'categoria' } }
    /**
     * Find zero or one Categoria that matches the filter.
     * @param {categoriaFindUniqueArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoriaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaFindUniqueArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Categoria that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {categoriaFindUniqueOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoriaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Categoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaFindFirstArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoriaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaFindFirstArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Categoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaFindFirstOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoriaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categoria.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categoria.findMany({ take: 10 })
     * 
     * // Only select the `id_categoria`
     * const categoriaWithId_categoriaOnly = await prisma.categoria.findMany({ select: { id_categoria: true } })
     * 
    **/
    findMany<T extends categoriaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Categoria.
     * @param {categoriaCreateArgs} args - Arguments to create a Categoria.
     * @example
     * // Create one Categoria
     * const Categoria = await prisma.categoria.create({
     *   data: {
     *     // ... data to create a Categoria
     *   }
     * })
     * 
    **/
    create<T extends categoriaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaCreateArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categorias.
     *     @param {categoriaCreateManyArgs} args - Arguments to create many Categorias.
     *     @example
     *     // Create many Categorias
     *     const categoria = await prisma.categoria.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoriaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categoria.
     * @param {categoriaDeleteArgs} args - Arguments to delete one Categoria.
     * @example
     * // Delete one Categoria
     * const Categoria = await prisma.categoria.delete({
     *   where: {
     *     // ... filter to delete one Categoria
     *   }
     * })
     * 
    **/
    delete<T extends categoriaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaDeleteArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Categoria.
     * @param {categoriaUpdateArgs} args - Arguments to update one Categoria.
     * @example
     * // Update one Categoria
     * const categoria = await prisma.categoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoriaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaUpdateArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categorias.
     * @param {categoriaDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoriaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categoria = await prisma.categoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoriaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categoria.
     * @param {categoriaUpsertArgs} args - Arguments to update or create a Categoria.
     * @example
     * // Update or create a Categoria
     * const categoria = await prisma.categoria.upsert({
     *   create: {
     *     // ... data to create a Categoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categoria we want to update
     *   }
     * })
    **/
    upsert<T extends categoriaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaUpsertArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categoria.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends categoriaCountArgs>(
      args?: Subset<T, categoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaAggregateArgs>(args: Subset<T, CategoriaAggregateArgs>): Prisma.PrismaPromise<GetCategoriaAggregateType<T>>

    /**
     * Group by Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoriaGroupByArgs['orderBy'] }
        : { orderBy?: categoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the categoria model
   */
  readonly fields: categoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for categoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Productos<T extends categoria$ProductosArgs<ExtArgs> = {}>(args?: Subset<T, categoria$ProductosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the categoria model
   */ 
  interface categoriaFieldRefs {
    readonly id_categoria: FieldRef<"categoria", 'Int'>
    readonly nombre_cat: FieldRef<"categoria", 'String'>
    readonly descripcion_cat: FieldRef<"categoria", 'String'>
  }
    

  // Custom InputTypes

  /**
   * categoria findUnique
   */
  export type categoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categoria to fetch.
     */
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria findUniqueOrThrow
   */
  export type categoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categoria to fetch.
     */
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria findFirst
   */
  export type categoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categoria to fetch.
     */
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriaOrderByWithRelationInput | categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categorias.
     */
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * categoria findFirstOrThrow
   */
  export type categoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categoria to fetch.
     */
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriaOrderByWithRelationInput | categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categorias.
     */
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * categoria findMany
   */
  export type categoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriaOrderByWithRelationInput | categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categorias.
     */
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * categoria create
   */
  export type categoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a categoria.
     */
    data: XOR<categoriaCreateInput, categoriaUncheckedCreateInput>
  }


  /**
   * categoria createMany
   */
  export type categoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categorias.
     */
    data: categoriaCreateManyInput | categoriaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * categoria update
   */
  export type categoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a categoria.
     */
    data: XOR<categoriaUpdateInput, categoriaUncheckedUpdateInput>
    /**
     * Choose, which categoria to update.
     */
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria updateMany
   */
  export type categoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categorias.
     */
    data: XOR<categoriaUpdateManyMutationInput, categoriaUncheckedUpdateManyInput>
    /**
     * Filter which categorias to update
     */
    where?: categoriaWhereInput
  }


  /**
   * categoria upsert
   */
  export type categoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the categoria to update in case it exists.
     */
    where: categoriaWhereUniqueInput
    /**
     * In case the categoria found by the `where` argument doesn't exist, create a new categoria with this data.
     */
    create: XOR<categoriaCreateInput, categoriaUncheckedCreateInput>
    /**
     * In case the categoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriaUpdateInput, categoriaUncheckedUpdateInput>
  }


  /**
   * categoria delete
   */
  export type categoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter which categoria to delete.
     */
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria deleteMany
   */
  export type categoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categorias to delete
     */
    where?: categoriaWhereInput
  }


  /**
   * categoria.Productos
   */
  export type categoria$ProductosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    where?: productoWhereInput
    orderBy?: productoOrderByWithRelationInput | productoOrderByWithRelationInput[]
    cursor?: productoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductoScalarFieldEnum | ProductoScalarFieldEnum[]
  }


  /**
   * categoria without action
   */
  export type categoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
  }



  /**
   * Model carrito
   */

  export type AggregateCarrito = {
    _count: CarritoCountAggregateOutputType | null
    _avg: CarritoAvgAggregateOutputType | null
    _sum: CarritoSumAggregateOutputType | null
    _min: CarritoMinAggregateOutputType | null
    _max: CarritoMaxAggregateOutputType | null
  }

  export type CarritoAvgAggregateOutputType = {
    id_carrito: number | null
    ID_Comprador: number | null
  }

  export type CarritoSumAggregateOutputType = {
    id_carrito: number | null
    ID_Comprador: number | null
  }

  export type CarritoMinAggregateOutputType = {
    id_carrito: number | null
    fecha_carrito: Date | null
    ID_Comprador: number | null
  }

  export type CarritoMaxAggregateOutputType = {
    id_carrito: number | null
    fecha_carrito: Date | null
    ID_Comprador: number | null
  }

  export type CarritoCountAggregateOutputType = {
    id_carrito: number
    fecha_carrito: number
    ID_Comprador: number
    _all: number
  }


  export type CarritoAvgAggregateInputType = {
    id_carrito?: true
    ID_Comprador?: true
  }

  export type CarritoSumAggregateInputType = {
    id_carrito?: true
    ID_Comprador?: true
  }

  export type CarritoMinAggregateInputType = {
    id_carrito?: true
    fecha_carrito?: true
    ID_Comprador?: true
  }

  export type CarritoMaxAggregateInputType = {
    id_carrito?: true
    fecha_carrito?: true
    ID_Comprador?: true
  }

  export type CarritoCountAggregateInputType = {
    id_carrito?: true
    fecha_carrito?: true
    ID_Comprador?: true
    _all?: true
  }

  export type CarritoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which carrito to aggregate.
     */
    where?: carritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carritos to fetch.
     */
    orderBy?: carritoOrderByWithRelationInput | carritoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: carritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carritos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned carritos
    **/
    _count?: true | CarritoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarritoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarritoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarritoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarritoMaxAggregateInputType
  }

  export type GetCarritoAggregateType<T extends CarritoAggregateArgs> = {
        [P in keyof T & keyof AggregateCarrito]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarrito[P]>
      : GetScalarType<T[P], AggregateCarrito[P]>
  }




  export type carritoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: carritoWhereInput
    orderBy?: carritoOrderByWithAggregationInput | carritoOrderByWithAggregationInput[]
    by: CarritoScalarFieldEnum[] | CarritoScalarFieldEnum
    having?: carritoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarritoCountAggregateInputType | true
    _avg?: CarritoAvgAggregateInputType
    _sum?: CarritoSumAggregateInputType
    _min?: CarritoMinAggregateInputType
    _max?: CarritoMaxAggregateInputType
  }

  export type CarritoGroupByOutputType = {
    id_carrito: number
    fecha_carrito: Date
    ID_Comprador: number
    _count: CarritoCountAggregateOutputType | null
    _avg: CarritoAvgAggregateOutputType | null
    _sum: CarritoSumAggregateOutputType | null
    _min: CarritoMinAggregateOutputType | null
    _max: CarritoMaxAggregateOutputType | null
  }

  type GetCarritoGroupByPayload<T extends carritoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarritoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarritoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarritoGroupByOutputType[P]>
            : GetScalarType<T[P], CarritoGroupByOutputType[P]>
        }
      >
    >


  export type carritoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_carrito?: boolean
    fecha_carrito?: boolean
    ID_Comprador?: boolean
    Comprador?: boolean | compradorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carrito"]>

  export type carritoSelectScalar = {
    id_carrito?: boolean
    fecha_carrito?: boolean
    ID_Comprador?: boolean
  }

  export type carritoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Comprador?: boolean | compradorDefaultArgs<ExtArgs>
  }


  export type $carritoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "carrito"
    objects: {
      Comprador: Prisma.$compradorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_carrito: number
      fecha_carrito: Date
      ID_Comprador: number
    }, ExtArgs["result"]["carrito"]>
    composites: {}
  }


  type carritoGetPayload<S extends boolean | null | undefined | carritoDefaultArgs> = $Result.GetResult<Prisma.$carritoPayload, S>

  type carritoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<carritoFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CarritoCountAggregateInputType | true
    }

  export interface carritoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['carrito'], meta: { name: 'carrito' } }
    /**
     * Find zero or one Carrito that matches the filter.
     * @param {carritoFindUniqueArgs} args - Arguments to find a Carrito
     * @example
     * // Get one Carrito
     * const carrito = await prisma.carrito.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends carritoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, carritoFindUniqueArgs<ExtArgs>>
    ): Prisma__carritoClient<$Result.GetResult<Prisma.$carritoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Carrito that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {carritoFindUniqueOrThrowArgs} args - Arguments to find a Carrito
     * @example
     * // Get one Carrito
     * const carrito = await prisma.carrito.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends carritoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, carritoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__carritoClient<$Result.GetResult<Prisma.$carritoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Carrito that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carritoFindFirstArgs} args - Arguments to find a Carrito
     * @example
     * // Get one Carrito
     * const carrito = await prisma.carrito.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends carritoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, carritoFindFirstArgs<ExtArgs>>
    ): Prisma__carritoClient<$Result.GetResult<Prisma.$carritoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Carrito that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carritoFindFirstOrThrowArgs} args - Arguments to find a Carrito
     * @example
     * // Get one Carrito
     * const carrito = await prisma.carrito.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends carritoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, carritoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__carritoClient<$Result.GetResult<Prisma.$carritoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Carritos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carritoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carritos
     * const carritos = await prisma.carrito.findMany()
     * 
     * // Get first 10 Carritos
     * const carritos = await prisma.carrito.findMany({ take: 10 })
     * 
     * // Only select the `id_carrito`
     * const carritoWithId_carritoOnly = await prisma.carrito.findMany({ select: { id_carrito: true } })
     * 
    **/
    findMany<T extends carritoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, carritoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$carritoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Carrito.
     * @param {carritoCreateArgs} args - Arguments to create a Carrito.
     * @example
     * // Create one Carrito
     * const Carrito = await prisma.carrito.create({
     *   data: {
     *     // ... data to create a Carrito
     *   }
     * })
     * 
    **/
    create<T extends carritoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, carritoCreateArgs<ExtArgs>>
    ): Prisma__carritoClient<$Result.GetResult<Prisma.$carritoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Carritos.
     *     @param {carritoCreateManyArgs} args - Arguments to create many Carritos.
     *     @example
     *     // Create many Carritos
     *     const carrito = await prisma.carrito.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends carritoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, carritoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Carrito.
     * @param {carritoDeleteArgs} args - Arguments to delete one Carrito.
     * @example
     * // Delete one Carrito
     * const Carrito = await prisma.carrito.delete({
     *   where: {
     *     // ... filter to delete one Carrito
     *   }
     * })
     * 
    **/
    delete<T extends carritoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, carritoDeleteArgs<ExtArgs>>
    ): Prisma__carritoClient<$Result.GetResult<Prisma.$carritoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Carrito.
     * @param {carritoUpdateArgs} args - Arguments to update one Carrito.
     * @example
     * // Update one Carrito
     * const carrito = await prisma.carrito.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends carritoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, carritoUpdateArgs<ExtArgs>>
    ): Prisma__carritoClient<$Result.GetResult<Prisma.$carritoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Carritos.
     * @param {carritoDeleteManyArgs} args - Arguments to filter Carritos to delete.
     * @example
     * // Delete a few Carritos
     * const { count } = await prisma.carrito.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends carritoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, carritoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carritos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carritoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carritos
     * const carrito = await prisma.carrito.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends carritoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, carritoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Carrito.
     * @param {carritoUpsertArgs} args - Arguments to update or create a Carrito.
     * @example
     * // Update or create a Carrito
     * const carrito = await prisma.carrito.upsert({
     *   create: {
     *     // ... data to create a Carrito
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Carrito we want to update
     *   }
     * })
    **/
    upsert<T extends carritoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, carritoUpsertArgs<ExtArgs>>
    ): Prisma__carritoClient<$Result.GetResult<Prisma.$carritoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Carritos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carritoCountArgs} args - Arguments to filter Carritos to count.
     * @example
     * // Count the number of Carritos
     * const count = await prisma.carrito.count({
     *   where: {
     *     // ... the filter for the Carritos we want to count
     *   }
     * })
    **/
    count<T extends carritoCountArgs>(
      args?: Subset<T, carritoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarritoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Carrito.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarritoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarritoAggregateArgs>(args: Subset<T, CarritoAggregateArgs>): Prisma.PrismaPromise<GetCarritoAggregateType<T>>

    /**
     * Group by Carrito.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carritoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends carritoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: carritoGroupByArgs['orderBy'] }
        : { orderBy?: carritoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, carritoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarritoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the carrito model
   */
  readonly fields: carritoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for carrito.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__carritoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Comprador<T extends compradorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, compradorDefaultArgs<ExtArgs>>): Prisma__compradorClient<$Result.GetResult<Prisma.$compradorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the carrito model
   */ 
  interface carritoFieldRefs {
    readonly id_carrito: FieldRef<"carrito", 'Int'>
    readonly fecha_carrito: FieldRef<"carrito", 'DateTime'>
    readonly ID_Comprador: FieldRef<"carrito", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * carrito findUnique
   */
  export type carritoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carrito
     */
    select?: carritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carritoInclude<ExtArgs> | null
    /**
     * Filter, which carrito to fetch.
     */
    where: carritoWhereUniqueInput
  }


  /**
   * carrito findUniqueOrThrow
   */
  export type carritoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carrito
     */
    select?: carritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carritoInclude<ExtArgs> | null
    /**
     * Filter, which carrito to fetch.
     */
    where: carritoWhereUniqueInput
  }


  /**
   * carrito findFirst
   */
  export type carritoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carrito
     */
    select?: carritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carritoInclude<ExtArgs> | null
    /**
     * Filter, which carrito to fetch.
     */
    where?: carritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carritos to fetch.
     */
    orderBy?: carritoOrderByWithRelationInput | carritoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for carritos.
     */
    cursor?: carritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carritos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of carritos.
     */
    distinct?: CarritoScalarFieldEnum | CarritoScalarFieldEnum[]
  }


  /**
   * carrito findFirstOrThrow
   */
  export type carritoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carrito
     */
    select?: carritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carritoInclude<ExtArgs> | null
    /**
     * Filter, which carrito to fetch.
     */
    where?: carritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carritos to fetch.
     */
    orderBy?: carritoOrderByWithRelationInput | carritoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for carritos.
     */
    cursor?: carritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carritos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of carritos.
     */
    distinct?: CarritoScalarFieldEnum | CarritoScalarFieldEnum[]
  }


  /**
   * carrito findMany
   */
  export type carritoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carrito
     */
    select?: carritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carritoInclude<ExtArgs> | null
    /**
     * Filter, which carritos to fetch.
     */
    where?: carritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carritos to fetch.
     */
    orderBy?: carritoOrderByWithRelationInput | carritoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing carritos.
     */
    cursor?: carritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carritos.
     */
    skip?: number
    distinct?: CarritoScalarFieldEnum | CarritoScalarFieldEnum[]
  }


  /**
   * carrito create
   */
  export type carritoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carrito
     */
    select?: carritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carritoInclude<ExtArgs> | null
    /**
     * The data needed to create a carrito.
     */
    data: XOR<carritoCreateInput, carritoUncheckedCreateInput>
  }


  /**
   * carrito createMany
   */
  export type carritoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many carritos.
     */
    data: carritoCreateManyInput | carritoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * carrito update
   */
  export type carritoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carrito
     */
    select?: carritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carritoInclude<ExtArgs> | null
    /**
     * The data needed to update a carrito.
     */
    data: XOR<carritoUpdateInput, carritoUncheckedUpdateInput>
    /**
     * Choose, which carrito to update.
     */
    where: carritoWhereUniqueInput
  }


  /**
   * carrito updateMany
   */
  export type carritoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update carritos.
     */
    data: XOR<carritoUpdateManyMutationInput, carritoUncheckedUpdateManyInput>
    /**
     * Filter which carritos to update
     */
    where?: carritoWhereInput
  }


  /**
   * carrito upsert
   */
  export type carritoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carrito
     */
    select?: carritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carritoInclude<ExtArgs> | null
    /**
     * The filter to search for the carrito to update in case it exists.
     */
    where: carritoWhereUniqueInput
    /**
     * In case the carrito found by the `where` argument doesn't exist, create a new carrito with this data.
     */
    create: XOR<carritoCreateInput, carritoUncheckedCreateInput>
    /**
     * In case the carrito was found with the provided `where` argument, update it with this data.
     */
    update: XOR<carritoUpdateInput, carritoUncheckedUpdateInput>
  }


  /**
   * carrito delete
   */
  export type carritoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carrito
     */
    select?: carritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carritoInclude<ExtArgs> | null
    /**
     * Filter which carrito to delete.
     */
    where: carritoWhereUniqueInput
  }


  /**
   * carrito deleteMany
   */
  export type carritoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which carritos to delete
     */
    where?: carritoWhereInput
  }


  /**
   * carrito without action
   */
  export type carritoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carrito
     */
    select?: carritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: carritoInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CompradorScalarFieldEnum: {
    id_comprador: 'id_comprador',
    direccion_comp: 'direccion_comp',
    ciudad_comp: 'ciudad_comp',
    telefono_comp: 'telefono_comp',
    nombre_comp: 'nombre_comp'
  };

  export type CompradorScalarFieldEnum = (typeof CompradorScalarFieldEnum)[keyof typeof CompradorScalarFieldEnum]


  export const ProductoScalarFieldEnum: {
    id_producto: 'id_producto',
    nombre_prod: 'nombre_prod',
    descripcion_prod: 'descripcion_prod',
    categoria: 'categoria',
    precio_prod: 'precio_prod',
    ID_Artesano: 'ID_Artesano',
    ID_Categoria: 'ID_Categoria'
  };

  export type ProductoScalarFieldEnum = (typeof ProductoScalarFieldEnum)[keyof typeof ProductoScalarFieldEnum]


  export const TransaccionScalarFieldEnum: {
    id_transaccion: 'id_transaccion',
    cantidad_trans: 'cantidad_trans',
    fecha_trans: 'fecha_trans',
    ID_Comprador: 'ID_Comprador',
    ID_Producto: 'ID_Producto'
  };

  export type TransaccionScalarFieldEnum = (typeof TransaccionScalarFieldEnum)[keyof typeof TransaccionScalarFieldEnum]


  export const UsuarioScalarFieldEnum: {
    id_usuario: 'id_usuario',
    nombre_usu: 'nombre_usu',
    apellido_usu: 'apellido_usu',
    email_usu: 'email_usu',
    password_usu: 'password_usu'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const ArtesanoScalarFieldEnum: {
    id_artesano: 'id_artesano',
    descripcion_art: 'descripcion_art',
    ubicacion_art: 'ubicacion_art',
    telefono_art: 'telefono_art',
    nombre_art: 'nombre_art'
  };

  export type ArtesanoScalarFieldEnum = (typeof ArtesanoScalarFieldEnum)[keyof typeof ArtesanoScalarFieldEnum]


  export const CategoriaScalarFieldEnum: {
    id_categoria: 'id_categoria',
    nombre_cat: 'nombre_cat',
    descripcion_cat: 'descripcion_cat'
  };

  export type CategoriaScalarFieldEnum = (typeof CategoriaScalarFieldEnum)[keyof typeof CategoriaScalarFieldEnum]


  export const CarritoScalarFieldEnum: {
    id_carrito: 'id_carrito',
    fecha_carrito: 'fecha_carrito',
    ID_Comprador: 'ID_Comprador'
  };

  export type CarritoScalarFieldEnum = (typeof CarritoScalarFieldEnum)[keyof typeof CarritoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type compradorWhereInput = {
    AND?: compradorWhereInput | compradorWhereInput[]
    OR?: compradorWhereInput[]
    NOT?: compradorWhereInput | compradorWhereInput[]
    id_comprador?: IntFilter<"comprador"> | number
    direccion_comp?: StringFilter<"comprador"> | string
    ciudad_comp?: StringFilter<"comprador"> | string
    telefono_comp?: StringFilter<"comprador"> | string
    nombre_comp?: StringNullableFilter<"comprador"> | string | null
    Carrito?: CarritoListRelationFilter
    Transaccion?: TransaccionListRelationFilter
  }

  export type compradorOrderByWithRelationInput = {
    id_comprador?: SortOrder
    direccion_comp?: SortOrder
    ciudad_comp?: SortOrder
    telefono_comp?: SortOrder
    nombre_comp?: SortOrderInput | SortOrder
    Carrito?: carritoOrderByRelationAggregateInput
    Transaccion?: transaccionOrderByRelationAggregateInput
  }

  export type compradorWhereUniqueInput = Prisma.AtLeast<{
    id_comprador?: number
    AND?: compradorWhereInput | compradorWhereInput[]
    OR?: compradorWhereInput[]
    NOT?: compradorWhereInput | compradorWhereInput[]
    direccion_comp?: StringFilter<"comprador"> | string
    ciudad_comp?: StringFilter<"comprador"> | string
    telefono_comp?: StringFilter<"comprador"> | string
    nombre_comp?: StringNullableFilter<"comprador"> | string | null
    Carrito?: CarritoListRelationFilter
    Transaccion?: TransaccionListRelationFilter
  }, "id_comprador">

  export type compradorOrderByWithAggregationInput = {
    id_comprador?: SortOrder
    direccion_comp?: SortOrder
    ciudad_comp?: SortOrder
    telefono_comp?: SortOrder
    nombre_comp?: SortOrderInput | SortOrder
    _count?: compradorCountOrderByAggregateInput
    _avg?: compradorAvgOrderByAggregateInput
    _max?: compradorMaxOrderByAggregateInput
    _min?: compradorMinOrderByAggregateInput
    _sum?: compradorSumOrderByAggregateInput
  }

  export type compradorScalarWhereWithAggregatesInput = {
    AND?: compradorScalarWhereWithAggregatesInput | compradorScalarWhereWithAggregatesInput[]
    OR?: compradorScalarWhereWithAggregatesInput[]
    NOT?: compradorScalarWhereWithAggregatesInput | compradorScalarWhereWithAggregatesInput[]
    id_comprador?: IntWithAggregatesFilter<"comprador"> | number
    direccion_comp?: StringWithAggregatesFilter<"comprador"> | string
    ciudad_comp?: StringWithAggregatesFilter<"comprador"> | string
    telefono_comp?: StringWithAggregatesFilter<"comprador"> | string
    nombre_comp?: StringNullableWithAggregatesFilter<"comprador"> | string | null
  }

  export type productoWhereInput = {
    AND?: productoWhereInput | productoWhereInput[]
    OR?: productoWhereInput[]
    NOT?: productoWhereInput | productoWhereInput[]
    id_producto?: IntFilter<"producto"> | number
    nombre_prod?: StringNullableFilter<"producto"> | string | null
    descripcion_prod?: StringFilter<"producto"> | string
    categoria?: StringFilter<"producto"> | string
    precio_prod?: IntNullableFilter<"producto"> | number | null
    ID_Artesano?: IntFilter<"producto"> | number
    ID_Categoria?: IntFilter<"producto"> | number
    artesano?: XOR<ArtesanoRelationFilter, artesanoWhereInput>
    UserCategoria?: XOR<CategoriaRelationFilter, categoriaWhereInput>
    Transaccion?: TransaccionListRelationFilter
  }

  export type productoOrderByWithRelationInput = {
    id_producto?: SortOrder
    nombre_prod?: SortOrderInput | SortOrder
    descripcion_prod?: SortOrder
    categoria?: SortOrder
    precio_prod?: SortOrderInput | SortOrder
    ID_Artesano?: SortOrder
    ID_Categoria?: SortOrder
    artesano?: artesanoOrderByWithRelationInput
    UserCategoria?: categoriaOrderByWithRelationInput
    Transaccion?: transaccionOrderByRelationAggregateInput
  }

  export type productoWhereUniqueInput = Prisma.AtLeast<{
    id_producto?: number
    AND?: productoWhereInput | productoWhereInput[]
    OR?: productoWhereInput[]
    NOT?: productoWhereInput | productoWhereInput[]
    nombre_prod?: StringNullableFilter<"producto"> | string | null
    descripcion_prod?: StringFilter<"producto"> | string
    categoria?: StringFilter<"producto"> | string
    precio_prod?: IntNullableFilter<"producto"> | number | null
    ID_Artesano?: IntFilter<"producto"> | number
    ID_Categoria?: IntFilter<"producto"> | number
    artesano?: XOR<ArtesanoRelationFilter, artesanoWhereInput>
    UserCategoria?: XOR<CategoriaRelationFilter, categoriaWhereInput>
    Transaccion?: TransaccionListRelationFilter
  }, "id_producto">

  export type productoOrderByWithAggregationInput = {
    id_producto?: SortOrder
    nombre_prod?: SortOrderInput | SortOrder
    descripcion_prod?: SortOrder
    categoria?: SortOrder
    precio_prod?: SortOrderInput | SortOrder
    ID_Artesano?: SortOrder
    ID_Categoria?: SortOrder
    _count?: productoCountOrderByAggregateInput
    _avg?: productoAvgOrderByAggregateInput
    _max?: productoMaxOrderByAggregateInput
    _min?: productoMinOrderByAggregateInput
    _sum?: productoSumOrderByAggregateInput
  }

  export type productoScalarWhereWithAggregatesInput = {
    AND?: productoScalarWhereWithAggregatesInput | productoScalarWhereWithAggregatesInput[]
    OR?: productoScalarWhereWithAggregatesInput[]
    NOT?: productoScalarWhereWithAggregatesInput | productoScalarWhereWithAggregatesInput[]
    id_producto?: IntWithAggregatesFilter<"producto"> | number
    nombre_prod?: StringNullableWithAggregatesFilter<"producto"> | string | null
    descripcion_prod?: StringWithAggregatesFilter<"producto"> | string
    categoria?: StringWithAggregatesFilter<"producto"> | string
    precio_prod?: IntNullableWithAggregatesFilter<"producto"> | number | null
    ID_Artesano?: IntWithAggregatesFilter<"producto"> | number
    ID_Categoria?: IntWithAggregatesFilter<"producto"> | number
  }

  export type transaccionWhereInput = {
    AND?: transaccionWhereInput | transaccionWhereInput[]
    OR?: transaccionWhereInput[]
    NOT?: transaccionWhereInput | transaccionWhereInput[]
    id_transaccion?: IntFilter<"transaccion"> | number
    cantidad_trans?: IntNullableFilter<"transaccion"> | number | null
    fecha_trans?: DateTimeFilter<"transaccion"> | Date | string
    ID_Comprador?: IntFilter<"transaccion"> | number
    ID_Producto?: IntFilter<"transaccion"> | number
    Comprador?: XOR<CompradorRelationFilter, compradorWhereInput>
    producto?: XOR<ProductoRelationFilter, productoWhereInput>
  }

  export type transaccionOrderByWithRelationInput = {
    id_transaccion?: SortOrder
    cantidad_trans?: SortOrderInput | SortOrder
    fecha_trans?: SortOrder
    ID_Comprador?: SortOrder
    ID_Producto?: SortOrder
    Comprador?: compradorOrderByWithRelationInput
    producto?: productoOrderByWithRelationInput
  }

  export type transaccionWhereUniqueInput = Prisma.AtLeast<{
    id_transaccion?: number
    AND?: transaccionWhereInput | transaccionWhereInput[]
    OR?: transaccionWhereInput[]
    NOT?: transaccionWhereInput | transaccionWhereInput[]
    cantidad_trans?: IntNullableFilter<"transaccion"> | number | null
    fecha_trans?: DateTimeFilter<"transaccion"> | Date | string
    ID_Comprador?: IntFilter<"transaccion"> | number
    ID_Producto?: IntFilter<"transaccion"> | number
    Comprador?: XOR<CompradorRelationFilter, compradorWhereInput>
    producto?: XOR<ProductoRelationFilter, productoWhereInput>
  }, "id_transaccion">

  export type transaccionOrderByWithAggregationInput = {
    id_transaccion?: SortOrder
    cantidad_trans?: SortOrderInput | SortOrder
    fecha_trans?: SortOrder
    ID_Comprador?: SortOrder
    ID_Producto?: SortOrder
    _count?: transaccionCountOrderByAggregateInput
    _avg?: transaccionAvgOrderByAggregateInput
    _max?: transaccionMaxOrderByAggregateInput
    _min?: transaccionMinOrderByAggregateInput
    _sum?: transaccionSumOrderByAggregateInput
  }

  export type transaccionScalarWhereWithAggregatesInput = {
    AND?: transaccionScalarWhereWithAggregatesInput | transaccionScalarWhereWithAggregatesInput[]
    OR?: transaccionScalarWhereWithAggregatesInput[]
    NOT?: transaccionScalarWhereWithAggregatesInput | transaccionScalarWhereWithAggregatesInput[]
    id_transaccion?: IntWithAggregatesFilter<"transaccion"> | number
    cantidad_trans?: IntNullableWithAggregatesFilter<"transaccion"> | number | null
    fecha_trans?: DateTimeWithAggregatesFilter<"transaccion"> | Date | string
    ID_Comprador?: IntWithAggregatesFilter<"transaccion"> | number
    ID_Producto?: IntWithAggregatesFilter<"transaccion"> | number
  }

  export type usuarioWhereInput = {
    AND?: usuarioWhereInput | usuarioWhereInput[]
    OR?: usuarioWhereInput[]
    NOT?: usuarioWhereInput | usuarioWhereInput[]
    id_usuario?: IntFilter<"usuario"> | number
    nombre_usu?: StringNullableFilter<"usuario"> | string | null
    apellido_usu?: StringFilter<"usuario"> | string
    email_usu?: StringFilter<"usuario"> | string
    password_usu?: StringNullableFilter<"usuario"> | string | null
    Artesano?: ArtesanoListRelationFilter
  }

  export type usuarioOrderByWithRelationInput = {
    id_usuario?: SortOrder
    nombre_usu?: SortOrderInput | SortOrder
    apellido_usu?: SortOrder
    email_usu?: SortOrder
    password_usu?: SortOrderInput | SortOrder
    Artesano?: artesanoOrderByRelationAggregateInput
  }

  export type usuarioWhereUniqueInput = Prisma.AtLeast<{
    id_usuario?: number
    email_usu?: string
    AND?: usuarioWhereInput | usuarioWhereInput[]
    OR?: usuarioWhereInput[]
    NOT?: usuarioWhereInput | usuarioWhereInput[]
    nombre_usu?: StringNullableFilter<"usuario"> | string | null
    apellido_usu?: StringFilter<"usuario"> | string
    password_usu?: StringNullableFilter<"usuario"> | string | null
    Artesano?: ArtesanoListRelationFilter
  }, "id_usuario" | "email_usu">

  export type usuarioOrderByWithAggregationInput = {
    id_usuario?: SortOrder
    nombre_usu?: SortOrderInput | SortOrder
    apellido_usu?: SortOrder
    email_usu?: SortOrder
    password_usu?: SortOrderInput | SortOrder
    _count?: usuarioCountOrderByAggregateInput
    _avg?: usuarioAvgOrderByAggregateInput
    _max?: usuarioMaxOrderByAggregateInput
    _min?: usuarioMinOrderByAggregateInput
    _sum?: usuarioSumOrderByAggregateInput
  }

  export type usuarioScalarWhereWithAggregatesInput = {
    AND?: usuarioScalarWhereWithAggregatesInput | usuarioScalarWhereWithAggregatesInput[]
    OR?: usuarioScalarWhereWithAggregatesInput[]
    NOT?: usuarioScalarWhereWithAggregatesInput | usuarioScalarWhereWithAggregatesInput[]
    id_usuario?: IntWithAggregatesFilter<"usuario"> | number
    nombre_usu?: StringNullableWithAggregatesFilter<"usuario"> | string | null
    apellido_usu?: StringWithAggregatesFilter<"usuario"> | string
    email_usu?: StringWithAggregatesFilter<"usuario"> | string
    password_usu?: StringNullableWithAggregatesFilter<"usuario"> | string | null
  }

  export type artesanoWhereInput = {
    AND?: artesanoWhereInput | artesanoWhereInput[]
    OR?: artesanoWhereInput[]
    NOT?: artesanoWhereInput | artesanoWhereInput[]
    id_artesano?: IntFilter<"artesano"> | number
    descripcion_art?: StringFilter<"artesano"> | string
    ubicacion_art?: StringFilter<"artesano"> | string
    telefono_art?: StringFilter<"artesano"> | string
    nombre_art?: StringNullableFilter<"artesano"> | string | null
    Productos?: ProductoListRelationFilter
    Usuario?: UsuarioListRelationFilter
  }

  export type artesanoOrderByWithRelationInput = {
    id_artesano?: SortOrder
    descripcion_art?: SortOrder
    ubicacion_art?: SortOrder
    telefono_art?: SortOrder
    nombre_art?: SortOrderInput | SortOrder
    Productos?: productoOrderByRelationAggregateInput
    Usuario?: usuarioOrderByRelationAggregateInput
  }

  export type artesanoWhereUniqueInput = Prisma.AtLeast<{
    id_artesano?: number
    AND?: artesanoWhereInput | artesanoWhereInput[]
    OR?: artesanoWhereInput[]
    NOT?: artesanoWhereInput | artesanoWhereInput[]
    descripcion_art?: StringFilter<"artesano"> | string
    ubicacion_art?: StringFilter<"artesano"> | string
    telefono_art?: StringFilter<"artesano"> | string
    nombre_art?: StringNullableFilter<"artesano"> | string | null
    Productos?: ProductoListRelationFilter
    Usuario?: UsuarioListRelationFilter
  }, "id_artesano">

  export type artesanoOrderByWithAggregationInput = {
    id_artesano?: SortOrder
    descripcion_art?: SortOrder
    ubicacion_art?: SortOrder
    telefono_art?: SortOrder
    nombre_art?: SortOrderInput | SortOrder
    _count?: artesanoCountOrderByAggregateInput
    _avg?: artesanoAvgOrderByAggregateInput
    _max?: artesanoMaxOrderByAggregateInput
    _min?: artesanoMinOrderByAggregateInput
    _sum?: artesanoSumOrderByAggregateInput
  }

  export type artesanoScalarWhereWithAggregatesInput = {
    AND?: artesanoScalarWhereWithAggregatesInput | artesanoScalarWhereWithAggregatesInput[]
    OR?: artesanoScalarWhereWithAggregatesInput[]
    NOT?: artesanoScalarWhereWithAggregatesInput | artesanoScalarWhereWithAggregatesInput[]
    id_artesano?: IntWithAggregatesFilter<"artesano"> | number
    descripcion_art?: StringWithAggregatesFilter<"artesano"> | string
    ubicacion_art?: StringWithAggregatesFilter<"artesano"> | string
    telefono_art?: StringWithAggregatesFilter<"artesano"> | string
    nombre_art?: StringNullableWithAggregatesFilter<"artesano"> | string | null
  }

  export type categoriaWhereInput = {
    AND?: categoriaWhereInput | categoriaWhereInput[]
    OR?: categoriaWhereInput[]
    NOT?: categoriaWhereInput | categoriaWhereInput[]
    id_categoria?: IntFilter<"categoria"> | number
    nombre_cat?: StringNullableFilter<"categoria"> | string | null
    descripcion_cat?: StringFilter<"categoria"> | string
    Productos?: ProductoListRelationFilter
  }

  export type categoriaOrderByWithRelationInput = {
    id_categoria?: SortOrder
    nombre_cat?: SortOrderInput | SortOrder
    descripcion_cat?: SortOrder
    Productos?: productoOrderByRelationAggregateInput
  }

  export type categoriaWhereUniqueInput = Prisma.AtLeast<{
    id_categoria?: number
    AND?: categoriaWhereInput | categoriaWhereInput[]
    OR?: categoriaWhereInput[]
    NOT?: categoriaWhereInput | categoriaWhereInput[]
    nombre_cat?: StringNullableFilter<"categoria"> | string | null
    descripcion_cat?: StringFilter<"categoria"> | string
    Productos?: ProductoListRelationFilter
  }, "id_categoria">

  export type categoriaOrderByWithAggregationInput = {
    id_categoria?: SortOrder
    nombre_cat?: SortOrderInput | SortOrder
    descripcion_cat?: SortOrder
    _count?: categoriaCountOrderByAggregateInput
    _avg?: categoriaAvgOrderByAggregateInput
    _max?: categoriaMaxOrderByAggregateInput
    _min?: categoriaMinOrderByAggregateInput
    _sum?: categoriaSumOrderByAggregateInput
  }

  export type categoriaScalarWhereWithAggregatesInput = {
    AND?: categoriaScalarWhereWithAggregatesInput | categoriaScalarWhereWithAggregatesInput[]
    OR?: categoriaScalarWhereWithAggregatesInput[]
    NOT?: categoriaScalarWhereWithAggregatesInput | categoriaScalarWhereWithAggregatesInput[]
    id_categoria?: IntWithAggregatesFilter<"categoria"> | number
    nombre_cat?: StringNullableWithAggregatesFilter<"categoria"> | string | null
    descripcion_cat?: StringWithAggregatesFilter<"categoria"> | string
  }

  export type carritoWhereInput = {
    AND?: carritoWhereInput | carritoWhereInput[]
    OR?: carritoWhereInput[]
    NOT?: carritoWhereInput | carritoWhereInput[]
    id_carrito?: IntFilter<"carrito"> | number
    fecha_carrito?: DateTimeFilter<"carrito"> | Date | string
    ID_Comprador?: IntFilter<"carrito"> | number
    Comprador?: XOR<CompradorRelationFilter, compradorWhereInput>
  }

  export type carritoOrderByWithRelationInput = {
    id_carrito?: SortOrder
    fecha_carrito?: SortOrder
    ID_Comprador?: SortOrder
    Comprador?: compradorOrderByWithRelationInput
  }

  export type carritoWhereUniqueInput = Prisma.AtLeast<{
    id_carrito?: number
    AND?: carritoWhereInput | carritoWhereInput[]
    OR?: carritoWhereInput[]
    NOT?: carritoWhereInput | carritoWhereInput[]
    fecha_carrito?: DateTimeFilter<"carrito"> | Date | string
    ID_Comprador?: IntFilter<"carrito"> | number
    Comprador?: XOR<CompradorRelationFilter, compradorWhereInput>
  }, "id_carrito">

  export type carritoOrderByWithAggregationInput = {
    id_carrito?: SortOrder
    fecha_carrito?: SortOrder
    ID_Comprador?: SortOrder
    _count?: carritoCountOrderByAggregateInput
    _avg?: carritoAvgOrderByAggregateInput
    _max?: carritoMaxOrderByAggregateInput
    _min?: carritoMinOrderByAggregateInput
    _sum?: carritoSumOrderByAggregateInput
  }

  export type carritoScalarWhereWithAggregatesInput = {
    AND?: carritoScalarWhereWithAggregatesInput | carritoScalarWhereWithAggregatesInput[]
    OR?: carritoScalarWhereWithAggregatesInput[]
    NOT?: carritoScalarWhereWithAggregatesInput | carritoScalarWhereWithAggregatesInput[]
    id_carrito?: IntWithAggregatesFilter<"carrito"> | number
    fecha_carrito?: DateTimeWithAggregatesFilter<"carrito"> | Date | string
    ID_Comprador?: IntWithAggregatesFilter<"carrito"> | number
  }

  export type compradorCreateInput = {
    direccion_comp: string
    ciudad_comp: string
    telefono_comp: string
    nombre_comp?: string | null
    Carrito?: carritoCreateNestedManyWithoutCompradorInput
    Transaccion?: transaccionCreateNestedManyWithoutCompradorInput
  }

  export type compradorUncheckedCreateInput = {
    id_comprador?: number
    direccion_comp: string
    ciudad_comp: string
    telefono_comp: string
    nombre_comp?: string | null
    Carrito?: carritoUncheckedCreateNestedManyWithoutCompradorInput
    Transaccion?: transaccionUncheckedCreateNestedManyWithoutCompradorInput
  }

  export type compradorUpdateInput = {
    direccion_comp?: StringFieldUpdateOperationsInput | string
    ciudad_comp?: StringFieldUpdateOperationsInput | string
    telefono_comp?: StringFieldUpdateOperationsInput | string
    nombre_comp?: NullableStringFieldUpdateOperationsInput | string | null
    Carrito?: carritoUpdateManyWithoutCompradorNestedInput
    Transaccion?: transaccionUpdateManyWithoutCompradorNestedInput
  }

  export type compradorUncheckedUpdateInput = {
    id_comprador?: IntFieldUpdateOperationsInput | number
    direccion_comp?: StringFieldUpdateOperationsInput | string
    ciudad_comp?: StringFieldUpdateOperationsInput | string
    telefono_comp?: StringFieldUpdateOperationsInput | string
    nombre_comp?: NullableStringFieldUpdateOperationsInput | string | null
    Carrito?: carritoUncheckedUpdateManyWithoutCompradorNestedInput
    Transaccion?: transaccionUncheckedUpdateManyWithoutCompradorNestedInput
  }

  export type compradorCreateManyInput = {
    id_comprador?: number
    direccion_comp: string
    ciudad_comp: string
    telefono_comp: string
    nombre_comp?: string | null
  }

  export type compradorUpdateManyMutationInput = {
    direccion_comp?: StringFieldUpdateOperationsInput | string
    ciudad_comp?: StringFieldUpdateOperationsInput | string
    telefono_comp?: StringFieldUpdateOperationsInput | string
    nombre_comp?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type compradorUncheckedUpdateManyInput = {
    id_comprador?: IntFieldUpdateOperationsInput | number
    direccion_comp?: StringFieldUpdateOperationsInput | string
    ciudad_comp?: StringFieldUpdateOperationsInput | string
    telefono_comp?: StringFieldUpdateOperationsInput | string
    nombre_comp?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productoCreateInput = {
    nombre_prod?: string | null
    descripcion_prod: string
    categoria: string
    precio_prod?: number | null
    artesano: artesanoCreateNestedOneWithoutProductosInput
    UserCategoria: categoriaCreateNestedOneWithoutProductosInput
    Transaccion?: transaccionCreateNestedManyWithoutProductoInput
  }

  export type productoUncheckedCreateInput = {
    id_producto?: number
    nombre_prod?: string | null
    descripcion_prod: string
    categoria: string
    precio_prod?: number | null
    ID_Artesano: number
    ID_Categoria: number
    Transaccion?: transaccionUncheckedCreateNestedManyWithoutProductoInput
  }

  export type productoUpdateInput = {
    nombre_prod?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion_prod?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    precio_prod?: NullableIntFieldUpdateOperationsInput | number | null
    artesano?: artesanoUpdateOneRequiredWithoutProductosNestedInput
    UserCategoria?: categoriaUpdateOneRequiredWithoutProductosNestedInput
    Transaccion?: transaccionUpdateManyWithoutProductoNestedInput
  }

  export type productoUncheckedUpdateInput = {
    id_producto?: IntFieldUpdateOperationsInput | number
    nombre_prod?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion_prod?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    precio_prod?: NullableIntFieldUpdateOperationsInput | number | null
    ID_Artesano?: IntFieldUpdateOperationsInput | number
    ID_Categoria?: IntFieldUpdateOperationsInput | number
    Transaccion?: transaccionUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type productoCreateManyInput = {
    id_producto?: number
    nombre_prod?: string | null
    descripcion_prod: string
    categoria: string
    precio_prod?: number | null
    ID_Artesano: number
    ID_Categoria: number
  }

  export type productoUpdateManyMutationInput = {
    nombre_prod?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion_prod?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    precio_prod?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type productoUncheckedUpdateManyInput = {
    id_producto?: IntFieldUpdateOperationsInput | number
    nombre_prod?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion_prod?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    precio_prod?: NullableIntFieldUpdateOperationsInput | number | null
    ID_Artesano?: IntFieldUpdateOperationsInput | number
    ID_Categoria?: IntFieldUpdateOperationsInput | number
  }

  export type transaccionCreateInput = {
    cantidad_trans?: number | null
    fecha_trans: Date | string
    Comprador: compradorCreateNestedOneWithoutTransaccionInput
    producto: productoCreateNestedOneWithoutTransaccionInput
  }

  export type transaccionUncheckedCreateInput = {
    id_transaccion?: number
    cantidad_trans?: number | null
    fecha_trans: Date | string
    ID_Comprador: number
    ID_Producto: number
  }

  export type transaccionUpdateInput = {
    cantidad_trans?: NullableIntFieldUpdateOperationsInput | number | null
    fecha_trans?: DateTimeFieldUpdateOperationsInput | Date | string
    Comprador?: compradorUpdateOneRequiredWithoutTransaccionNestedInput
    producto?: productoUpdateOneRequiredWithoutTransaccionNestedInput
  }

  export type transaccionUncheckedUpdateInput = {
    id_transaccion?: IntFieldUpdateOperationsInput | number
    cantidad_trans?: NullableIntFieldUpdateOperationsInput | number | null
    fecha_trans?: DateTimeFieldUpdateOperationsInput | Date | string
    ID_Comprador?: IntFieldUpdateOperationsInput | number
    ID_Producto?: IntFieldUpdateOperationsInput | number
  }

  export type transaccionCreateManyInput = {
    id_transaccion?: number
    cantidad_trans?: number | null
    fecha_trans: Date | string
    ID_Comprador: number
    ID_Producto: number
  }

  export type transaccionUpdateManyMutationInput = {
    cantidad_trans?: NullableIntFieldUpdateOperationsInput | number | null
    fecha_trans?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transaccionUncheckedUpdateManyInput = {
    id_transaccion?: IntFieldUpdateOperationsInput | number
    cantidad_trans?: NullableIntFieldUpdateOperationsInput | number | null
    fecha_trans?: DateTimeFieldUpdateOperationsInput | Date | string
    ID_Comprador?: IntFieldUpdateOperationsInput | number
    ID_Producto?: IntFieldUpdateOperationsInput | number
  }

  export type usuarioCreateInput = {
    nombre_usu?: string | null
    apellido_usu: string
    email_usu: string
    password_usu?: string | null
    Artesano?: artesanoCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateInput = {
    id_usuario?: number
    nombre_usu?: string | null
    apellido_usu: string
    email_usu: string
    password_usu?: string | null
    Artesano?: artesanoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUpdateInput = {
    nombre_usu?: NullableStringFieldUpdateOperationsInput | string | null
    apellido_usu?: StringFieldUpdateOperationsInput | string
    email_usu?: StringFieldUpdateOperationsInput | string
    password_usu?: NullableStringFieldUpdateOperationsInput | string | null
    Artesano?: artesanoUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    nombre_usu?: NullableStringFieldUpdateOperationsInput | string | null
    apellido_usu?: StringFieldUpdateOperationsInput | string
    email_usu?: StringFieldUpdateOperationsInput | string
    password_usu?: NullableStringFieldUpdateOperationsInput | string | null
    Artesano?: artesanoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioCreateManyInput = {
    id_usuario?: number
    nombre_usu?: string | null
    apellido_usu: string
    email_usu: string
    password_usu?: string | null
  }

  export type usuarioUpdateManyMutationInput = {
    nombre_usu?: NullableStringFieldUpdateOperationsInput | string | null
    apellido_usu?: StringFieldUpdateOperationsInput | string
    email_usu?: StringFieldUpdateOperationsInput | string
    password_usu?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usuarioUncheckedUpdateManyInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    nombre_usu?: NullableStringFieldUpdateOperationsInput | string | null
    apellido_usu?: StringFieldUpdateOperationsInput | string
    email_usu?: StringFieldUpdateOperationsInput | string
    password_usu?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type artesanoCreateInput = {
    descripcion_art: string
    ubicacion_art: string
    telefono_art: string
    nombre_art?: string | null
    Productos?: productoCreateNestedManyWithoutArtesanoInput
    Usuario?: usuarioCreateNestedManyWithoutArtesanoInput
  }

  export type artesanoUncheckedCreateInput = {
    id_artesano?: number
    descripcion_art: string
    ubicacion_art: string
    telefono_art: string
    nombre_art?: string | null
    Productos?: productoUncheckedCreateNestedManyWithoutArtesanoInput
    Usuario?: usuarioUncheckedCreateNestedManyWithoutArtesanoInput
  }

  export type artesanoUpdateInput = {
    descripcion_art?: StringFieldUpdateOperationsInput | string
    ubicacion_art?: StringFieldUpdateOperationsInput | string
    telefono_art?: StringFieldUpdateOperationsInput | string
    nombre_art?: NullableStringFieldUpdateOperationsInput | string | null
    Productos?: productoUpdateManyWithoutArtesanoNestedInput
    Usuario?: usuarioUpdateManyWithoutArtesanoNestedInput
  }

  export type artesanoUncheckedUpdateInput = {
    id_artesano?: IntFieldUpdateOperationsInput | number
    descripcion_art?: StringFieldUpdateOperationsInput | string
    ubicacion_art?: StringFieldUpdateOperationsInput | string
    telefono_art?: StringFieldUpdateOperationsInput | string
    nombre_art?: NullableStringFieldUpdateOperationsInput | string | null
    Productos?: productoUncheckedUpdateManyWithoutArtesanoNestedInput
    Usuario?: usuarioUncheckedUpdateManyWithoutArtesanoNestedInput
  }

  export type artesanoCreateManyInput = {
    id_artesano?: number
    descripcion_art: string
    ubicacion_art: string
    telefono_art: string
    nombre_art?: string | null
  }

  export type artesanoUpdateManyMutationInput = {
    descripcion_art?: StringFieldUpdateOperationsInput | string
    ubicacion_art?: StringFieldUpdateOperationsInput | string
    telefono_art?: StringFieldUpdateOperationsInput | string
    nombre_art?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type artesanoUncheckedUpdateManyInput = {
    id_artesano?: IntFieldUpdateOperationsInput | number
    descripcion_art?: StringFieldUpdateOperationsInput | string
    ubicacion_art?: StringFieldUpdateOperationsInput | string
    telefono_art?: StringFieldUpdateOperationsInput | string
    nombre_art?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type categoriaCreateInput = {
    nombre_cat?: string | null
    descripcion_cat: string
    Productos?: productoCreateNestedManyWithoutUserCategoriaInput
  }

  export type categoriaUncheckedCreateInput = {
    id_categoria?: number
    nombre_cat?: string | null
    descripcion_cat: string
    Productos?: productoUncheckedCreateNestedManyWithoutUserCategoriaInput
  }

  export type categoriaUpdateInput = {
    nombre_cat?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion_cat?: StringFieldUpdateOperationsInput | string
    Productos?: productoUpdateManyWithoutUserCategoriaNestedInput
  }

  export type categoriaUncheckedUpdateInput = {
    id_categoria?: IntFieldUpdateOperationsInput | number
    nombre_cat?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion_cat?: StringFieldUpdateOperationsInput | string
    Productos?: productoUncheckedUpdateManyWithoutUserCategoriaNestedInput
  }

  export type categoriaCreateManyInput = {
    id_categoria?: number
    nombre_cat?: string | null
    descripcion_cat: string
  }

  export type categoriaUpdateManyMutationInput = {
    nombre_cat?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion_cat?: StringFieldUpdateOperationsInput | string
  }

  export type categoriaUncheckedUpdateManyInput = {
    id_categoria?: IntFieldUpdateOperationsInput | number
    nombre_cat?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion_cat?: StringFieldUpdateOperationsInput | string
  }

  export type carritoCreateInput = {
    fecha_carrito: Date | string
    Comprador: compradorCreateNestedOneWithoutCarritoInput
  }

  export type carritoUncheckedCreateInput = {
    id_carrito?: number
    fecha_carrito: Date | string
    ID_Comprador: number
  }

  export type carritoUpdateInput = {
    fecha_carrito?: DateTimeFieldUpdateOperationsInput | Date | string
    Comprador?: compradorUpdateOneRequiredWithoutCarritoNestedInput
  }

  export type carritoUncheckedUpdateInput = {
    id_carrito?: IntFieldUpdateOperationsInput | number
    fecha_carrito?: DateTimeFieldUpdateOperationsInput | Date | string
    ID_Comprador?: IntFieldUpdateOperationsInput | number
  }

  export type carritoCreateManyInput = {
    id_carrito?: number
    fecha_carrito: Date | string
    ID_Comprador: number
  }

  export type carritoUpdateManyMutationInput = {
    fecha_carrito?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type carritoUncheckedUpdateManyInput = {
    id_carrito?: IntFieldUpdateOperationsInput | number
    fecha_carrito?: DateTimeFieldUpdateOperationsInput | Date | string
    ID_Comprador?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CarritoListRelationFilter = {
    every?: carritoWhereInput
    some?: carritoWhereInput
    none?: carritoWhereInput
  }

  export type TransaccionListRelationFilter = {
    every?: transaccionWhereInput
    some?: transaccionWhereInput
    none?: transaccionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type carritoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type transaccionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type compradorCountOrderByAggregateInput = {
    id_comprador?: SortOrder
    direccion_comp?: SortOrder
    ciudad_comp?: SortOrder
    telefono_comp?: SortOrder
    nombre_comp?: SortOrder
  }

  export type compradorAvgOrderByAggregateInput = {
    id_comprador?: SortOrder
  }

  export type compradorMaxOrderByAggregateInput = {
    id_comprador?: SortOrder
    direccion_comp?: SortOrder
    ciudad_comp?: SortOrder
    telefono_comp?: SortOrder
    nombre_comp?: SortOrder
  }

  export type compradorMinOrderByAggregateInput = {
    id_comprador?: SortOrder
    direccion_comp?: SortOrder
    ciudad_comp?: SortOrder
    telefono_comp?: SortOrder
    nombre_comp?: SortOrder
  }

  export type compradorSumOrderByAggregateInput = {
    id_comprador?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ArtesanoRelationFilter = {
    is?: artesanoWhereInput
    isNot?: artesanoWhereInput
  }

  export type CategoriaRelationFilter = {
    is?: categoriaWhereInput
    isNot?: categoriaWhereInput
  }

  export type productoCountOrderByAggregateInput = {
    id_producto?: SortOrder
    nombre_prod?: SortOrder
    descripcion_prod?: SortOrder
    categoria?: SortOrder
    precio_prod?: SortOrder
    ID_Artesano?: SortOrder
    ID_Categoria?: SortOrder
  }

  export type productoAvgOrderByAggregateInput = {
    id_producto?: SortOrder
    precio_prod?: SortOrder
    ID_Artesano?: SortOrder
    ID_Categoria?: SortOrder
  }

  export type productoMaxOrderByAggregateInput = {
    id_producto?: SortOrder
    nombre_prod?: SortOrder
    descripcion_prod?: SortOrder
    categoria?: SortOrder
    precio_prod?: SortOrder
    ID_Artesano?: SortOrder
    ID_Categoria?: SortOrder
  }

  export type productoMinOrderByAggregateInput = {
    id_producto?: SortOrder
    nombre_prod?: SortOrder
    descripcion_prod?: SortOrder
    categoria?: SortOrder
    precio_prod?: SortOrder
    ID_Artesano?: SortOrder
    ID_Categoria?: SortOrder
  }

  export type productoSumOrderByAggregateInput = {
    id_producto?: SortOrder
    precio_prod?: SortOrder
    ID_Artesano?: SortOrder
    ID_Categoria?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CompradorRelationFilter = {
    is?: compradorWhereInput
    isNot?: compradorWhereInput
  }

  export type ProductoRelationFilter = {
    is?: productoWhereInput
    isNot?: productoWhereInput
  }

  export type transaccionCountOrderByAggregateInput = {
    id_transaccion?: SortOrder
    cantidad_trans?: SortOrder
    fecha_trans?: SortOrder
    ID_Comprador?: SortOrder
    ID_Producto?: SortOrder
  }

  export type transaccionAvgOrderByAggregateInput = {
    id_transaccion?: SortOrder
    cantidad_trans?: SortOrder
    ID_Comprador?: SortOrder
    ID_Producto?: SortOrder
  }

  export type transaccionMaxOrderByAggregateInput = {
    id_transaccion?: SortOrder
    cantidad_trans?: SortOrder
    fecha_trans?: SortOrder
    ID_Comprador?: SortOrder
    ID_Producto?: SortOrder
  }

  export type transaccionMinOrderByAggregateInput = {
    id_transaccion?: SortOrder
    cantidad_trans?: SortOrder
    fecha_trans?: SortOrder
    ID_Comprador?: SortOrder
    ID_Producto?: SortOrder
  }

  export type transaccionSumOrderByAggregateInput = {
    id_transaccion?: SortOrder
    cantidad_trans?: SortOrder
    ID_Comprador?: SortOrder
    ID_Producto?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ArtesanoListRelationFilter = {
    every?: artesanoWhereInput
    some?: artesanoWhereInput
    none?: artesanoWhereInput
  }

  export type artesanoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usuarioCountOrderByAggregateInput = {
    id_usuario?: SortOrder
    nombre_usu?: SortOrder
    apellido_usu?: SortOrder
    email_usu?: SortOrder
    password_usu?: SortOrder
  }

  export type usuarioAvgOrderByAggregateInput = {
    id_usuario?: SortOrder
  }

  export type usuarioMaxOrderByAggregateInput = {
    id_usuario?: SortOrder
    nombre_usu?: SortOrder
    apellido_usu?: SortOrder
    email_usu?: SortOrder
    password_usu?: SortOrder
  }

  export type usuarioMinOrderByAggregateInput = {
    id_usuario?: SortOrder
    nombre_usu?: SortOrder
    apellido_usu?: SortOrder
    email_usu?: SortOrder
    password_usu?: SortOrder
  }

  export type usuarioSumOrderByAggregateInput = {
    id_usuario?: SortOrder
  }

  export type ProductoListRelationFilter = {
    every?: productoWhereInput
    some?: productoWhereInput
    none?: productoWhereInput
  }

  export type UsuarioListRelationFilter = {
    every?: usuarioWhereInput
    some?: usuarioWhereInput
    none?: usuarioWhereInput
  }

  export type productoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usuarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type artesanoCountOrderByAggregateInput = {
    id_artesano?: SortOrder
    descripcion_art?: SortOrder
    ubicacion_art?: SortOrder
    telefono_art?: SortOrder
    nombre_art?: SortOrder
  }

  export type artesanoAvgOrderByAggregateInput = {
    id_artesano?: SortOrder
  }

  export type artesanoMaxOrderByAggregateInput = {
    id_artesano?: SortOrder
    descripcion_art?: SortOrder
    ubicacion_art?: SortOrder
    telefono_art?: SortOrder
    nombre_art?: SortOrder
  }

  export type artesanoMinOrderByAggregateInput = {
    id_artesano?: SortOrder
    descripcion_art?: SortOrder
    ubicacion_art?: SortOrder
    telefono_art?: SortOrder
    nombre_art?: SortOrder
  }

  export type artesanoSumOrderByAggregateInput = {
    id_artesano?: SortOrder
  }

  export type categoriaCountOrderByAggregateInput = {
    id_categoria?: SortOrder
    nombre_cat?: SortOrder
    descripcion_cat?: SortOrder
  }

  export type categoriaAvgOrderByAggregateInput = {
    id_categoria?: SortOrder
  }

  export type categoriaMaxOrderByAggregateInput = {
    id_categoria?: SortOrder
    nombre_cat?: SortOrder
    descripcion_cat?: SortOrder
  }

  export type categoriaMinOrderByAggregateInput = {
    id_categoria?: SortOrder
    nombre_cat?: SortOrder
    descripcion_cat?: SortOrder
  }

  export type categoriaSumOrderByAggregateInput = {
    id_categoria?: SortOrder
  }

  export type carritoCountOrderByAggregateInput = {
    id_carrito?: SortOrder
    fecha_carrito?: SortOrder
    ID_Comprador?: SortOrder
  }

  export type carritoAvgOrderByAggregateInput = {
    id_carrito?: SortOrder
    ID_Comprador?: SortOrder
  }

  export type carritoMaxOrderByAggregateInput = {
    id_carrito?: SortOrder
    fecha_carrito?: SortOrder
    ID_Comprador?: SortOrder
  }

  export type carritoMinOrderByAggregateInput = {
    id_carrito?: SortOrder
    fecha_carrito?: SortOrder
    ID_Comprador?: SortOrder
  }

  export type carritoSumOrderByAggregateInput = {
    id_carrito?: SortOrder
    ID_Comprador?: SortOrder
  }

  export type carritoCreateNestedManyWithoutCompradorInput = {
    create?: XOR<carritoCreateWithoutCompradorInput, carritoUncheckedCreateWithoutCompradorInput> | carritoCreateWithoutCompradorInput[] | carritoUncheckedCreateWithoutCompradorInput[]
    connectOrCreate?: carritoCreateOrConnectWithoutCompradorInput | carritoCreateOrConnectWithoutCompradorInput[]
    createMany?: carritoCreateManyCompradorInputEnvelope
    connect?: carritoWhereUniqueInput | carritoWhereUniqueInput[]
  }

  export type transaccionCreateNestedManyWithoutCompradorInput = {
    create?: XOR<transaccionCreateWithoutCompradorInput, transaccionUncheckedCreateWithoutCompradorInput> | transaccionCreateWithoutCompradorInput[] | transaccionUncheckedCreateWithoutCompradorInput[]
    connectOrCreate?: transaccionCreateOrConnectWithoutCompradorInput | transaccionCreateOrConnectWithoutCompradorInput[]
    createMany?: transaccionCreateManyCompradorInputEnvelope
    connect?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
  }

  export type carritoUncheckedCreateNestedManyWithoutCompradorInput = {
    create?: XOR<carritoCreateWithoutCompradorInput, carritoUncheckedCreateWithoutCompradorInput> | carritoCreateWithoutCompradorInput[] | carritoUncheckedCreateWithoutCompradorInput[]
    connectOrCreate?: carritoCreateOrConnectWithoutCompradorInput | carritoCreateOrConnectWithoutCompradorInput[]
    createMany?: carritoCreateManyCompradorInputEnvelope
    connect?: carritoWhereUniqueInput | carritoWhereUniqueInput[]
  }

  export type transaccionUncheckedCreateNestedManyWithoutCompradorInput = {
    create?: XOR<transaccionCreateWithoutCompradorInput, transaccionUncheckedCreateWithoutCompradorInput> | transaccionCreateWithoutCompradorInput[] | transaccionUncheckedCreateWithoutCompradorInput[]
    connectOrCreate?: transaccionCreateOrConnectWithoutCompradorInput | transaccionCreateOrConnectWithoutCompradorInput[]
    createMany?: transaccionCreateManyCompradorInputEnvelope
    connect?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type carritoUpdateManyWithoutCompradorNestedInput = {
    create?: XOR<carritoCreateWithoutCompradorInput, carritoUncheckedCreateWithoutCompradorInput> | carritoCreateWithoutCompradorInput[] | carritoUncheckedCreateWithoutCompradorInput[]
    connectOrCreate?: carritoCreateOrConnectWithoutCompradorInput | carritoCreateOrConnectWithoutCompradorInput[]
    upsert?: carritoUpsertWithWhereUniqueWithoutCompradorInput | carritoUpsertWithWhereUniqueWithoutCompradorInput[]
    createMany?: carritoCreateManyCompradorInputEnvelope
    set?: carritoWhereUniqueInput | carritoWhereUniqueInput[]
    disconnect?: carritoWhereUniqueInput | carritoWhereUniqueInput[]
    delete?: carritoWhereUniqueInput | carritoWhereUniqueInput[]
    connect?: carritoWhereUniqueInput | carritoWhereUniqueInput[]
    update?: carritoUpdateWithWhereUniqueWithoutCompradorInput | carritoUpdateWithWhereUniqueWithoutCompradorInput[]
    updateMany?: carritoUpdateManyWithWhereWithoutCompradorInput | carritoUpdateManyWithWhereWithoutCompradorInput[]
    deleteMany?: carritoScalarWhereInput | carritoScalarWhereInput[]
  }

  export type transaccionUpdateManyWithoutCompradorNestedInput = {
    create?: XOR<transaccionCreateWithoutCompradorInput, transaccionUncheckedCreateWithoutCompradorInput> | transaccionCreateWithoutCompradorInput[] | transaccionUncheckedCreateWithoutCompradorInput[]
    connectOrCreate?: transaccionCreateOrConnectWithoutCompradorInput | transaccionCreateOrConnectWithoutCompradorInput[]
    upsert?: transaccionUpsertWithWhereUniqueWithoutCompradorInput | transaccionUpsertWithWhereUniqueWithoutCompradorInput[]
    createMany?: transaccionCreateManyCompradorInputEnvelope
    set?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
    disconnect?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
    delete?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
    connect?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
    update?: transaccionUpdateWithWhereUniqueWithoutCompradorInput | transaccionUpdateWithWhereUniqueWithoutCompradorInput[]
    updateMany?: transaccionUpdateManyWithWhereWithoutCompradorInput | transaccionUpdateManyWithWhereWithoutCompradorInput[]
    deleteMany?: transaccionScalarWhereInput | transaccionScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type carritoUncheckedUpdateManyWithoutCompradorNestedInput = {
    create?: XOR<carritoCreateWithoutCompradorInput, carritoUncheckedCreateWithoutCompradorInput> | carritoCreateWithoutCompradorInput[] | carritoUncheckedCreateWithoutCompradorInput[]
    connectOrCreate?: carritoCreateOrConnectWithoutCompradorInput | carritoCreateOrConnectWithoutCompradorInput[]
    upsert?: carritoUpsertWithWhereUniqueWithoutCompradorInput | carritoUpsertWithWhereUniqueWithoutCompradorInput[]
    createMany?: carritoCreateManyCompradorInputEnvelope
    set?: carritoWhereUniqueInput | carritoWhereUniqueInput[]
    disconnect?: carritoWhereUniqueInput | carritoWhereUniqueInput[]
    delete?: carritoWhereUniqueInput | carritoWhereUniqueInput[]
    connect?: carritoWhereUniqueInput | carritoWhereUniqueInput[]
    update?: carritoUpdateWithWhereUniqueWithoutCompradorInput | carritoUpdateWithWhereUniqueWithoutCompradorInput[]
    updateMany?: carritoUpdateManyWithWhereWithoutCompradorInput | carritoUpdateManyWithWhereWithoutCompradorInput[]
    deleteMany?: carritoScalarWhereInput | carritoScalarWhereInput[]
  }

  export type transaccionUncheckedUpdateManyWithoutCompradorNestedInput = {
    create?: XOR<transaccionCreateWithoutCompradorInput, transaccionUncheckedCreateWithoutCompradorInput> | transaccionCreateWithoutCompradorInput[] | transaccionUncheckedCreateWithoutCompradorInput[]
    connectOrCreate?: transaccionCreateOrConnectWithoutCompradorInput | transaccionCreateOrConnectWithoutCompradorInput[]
    upsert?: transaccionUpsertWithWhereUniqueWithoutCompradorInput | transaccionUpsertWithWhereUniqueWithoutCompradorInput[]
    createMany?: transaccionCreateManyCompradorInputEnvelope
    set?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
    disconnect?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
    delete?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
    connect?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
    update?: transaccionUpdateWithWhereUniqueWithoutCompradorInput | transaccionUpdateWithWhereUniqueWithoutCompradorInput[]
    updateMany?: transaccionUpdateManyWithWhereWithoutCompradorInput | transaccionUpdateManyWithWhereWithoutCompradorInput[]
    deleteMany?: transaccionScalarWhereInput | transaccionScalarWhereInput[]
  }

  export type artesanoCreateNestedOneWithoutProductosInput = {
    create?: XOR<artesanoCreateWithoutProductosInput, artesanoUncheckedCreateWithoutProductosInput>
    connectOrCreate?: artesanoCreateOrConnectWithoutProductosInput
    connect?: artesanoWhereUniqueInput
  }

  export type categoriaCreateNestedOneWithoutProductosInput = {
    create?: XOR<categoriaCreateWithoutProductosInput, categoriaUncheckedCreateWithoutProductosInput>
    connectOrCreate?: categoriaCreateOrConnectWithoutProductosInput
    connect?: categoriaWhereUniqueInput
  }

  export type transaccionCreateNestedManyWithoutProductoInput = {
    create?: XOR<transaccionCreateWithoutProductoInput, transaccionUncheckedCreateWithoutProductoInput> | transaccionCreateWithoutProductoInput[] | transaccionUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: transaccionCreateOrConnectWithoutProductoInput | transaccionCreateOrConnectWithoutProductoInput[]
    createMany?: transaccionCreateManyProductoInputEnvelope
    connect?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
  }

  export type transaccionUncheckedCreateNestedManyWithoutProductoInput = {
    create?: XOR<transaccionCreateWithoutProductoInput, transaccionUncheckedCreateWithoutProductoInput> | transaccionCreateWithoutProductoInput[] | transaccionUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: transaccionCreateOrConnectWithoutProductoInput | transaccionCreateOrConnectWithoutProductoInput[]
    createMany?: transaccionCreateManyProductoInputEnvelope
    connect?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type artesanoUpdateOneRequiredWithoutProductosNestedInput = {
    create?: XOR<artesanoCreateWithoutProductosInput, artesanoUncheckedCreateWithoutProductosInput>
    connectOrCreate?: artesanoCreateOrConnectWithoutProductosInput
    upsert?: artesanoUpsertWithoutProductosInput
    connect?: artesanoWhereUniqueInput
    update?: XOR<XOR<artesanoUpdateToOneWithWhereWithoutProductosInput, artesanoUpdateWithoutProductosInput>, artesanoUncheckedUpdateWithoutProductosInput>
  }

  export type categoriaUpdateOneRequiredWithoutProductosNestedInput = {
    create?: XOR<categoriaCreateWithoutProductosInput, categoriaUncheckedCreateWithoutProductosInput>
    connectOrCreate?: categoriaCreateOrConnectWithoutProductosInput
    upsert?: categoriaUpsertWithoutProductosInput
    connect?: categoriaWhereUniqueInput
    update?: XOR<XOR<categoriaUpdateToOneWithWhereWithoutProductosInput, categoriaUpdateWithoutProductosInput>, categoriaUncheckedUpdateWithoutProductosInput>
  }

  export type transaccionUpdateManyWithoutProductoNestedInput = {
    create?: XOR<transaccionCreateWithoutProductoInput, transaccionUncheckedCreateWithoutProductoInput> | transaccionCreateWithoutProductoInput[] | transaccionUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: transaccionCreateOrConnectWithoutProductoInput | transaccionCreateOrConnectWithoutProductoInput[]
    upsert?: transaccionUpsertWithWhereUniqueWithoutProductoInput | transaccionUpsertWithWhereUniqueWithoutProductoInput[]
    createMany?: transaccionCreateManyProductoInputEnvelope
    set?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
    disconnect?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
    delete?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
    connect?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
    update?: transaccionUpdateWithWhereUniqueWithoutProductoInput | transaccionUpdateWithWhereUniqueWithoutProductoInput[]
    updateMany?: transaccionUpdateManyWithWhereWithoutProductoInput | transaccionUpdateManyWithWhereWithoutProductoInput[]
    deleteMany?: transaccionScalarWhereInput | transaccionScalarWhereInput[]
  }

  export type transaccionUncheckedUpdateManyWithoutProductoNestedInput = {
    create?: XOR<transaccionCreateWithoutProductoInput, transaccionUncheckedCreateWithoutProductoInput> | transaccionCreateWithoutProductoInput[] | transaccionUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: transaccionCreateOrConnectWithoutProductoInput | transaccionCreateOrConnectWithoutProductoInput[]
    upsert?: transaccionUpsertWithWhereUniqueWithoutProductoInput | transaccionUpsertWithWhereUniqueWithoutProductoInput[]
    createMany?: transaccionCreateManyProductoInputEnvelope
    set?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
    disconnect?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
    delete?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
    connect?: transaccionWhereUniqueInput | transaccionWhereUniqueInput[]
    update?: transaccionUpdateWithWhereUniqueWithoutProductoInput | transaccionUpdateWithWhereUniqueWithoutProductoInput[]
    updateMany?: transaccionUpdateManyWithWhereWithoutProductoInput | transaccionUpdateManyWithWhereWithoutProductoInput[]
    deleteMany?: transaccionScalarWhereInput | transaccionScalarWhereInput[]
  }

  export type compradorCreateNestedOneWithoutTransaccionInput = {
    create?: XOR<compradorCreateWithoutTransaccionInput, compradorUncheckedCreateWithoutTransaccionInput>
    connectOrCreate?: compradorCreateOrConnectWithoutTransaccionInput
    connect?: compradorWhereUniqueInput
  }

  export type productoCreateNestedOneWithoutTransaccionInput = {
    create?: XOR<productoCreateWithoutTransaccionInput, productoUncheckedCreateWithoutTransaccionInput>
    connectOrCreate?: productoCreateOrConnectWithoutTransaccionInput
    connect?: productoWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type compradorUpdateOneRequiredWithoutTransaccionNestedInput = {
    create?: XOR<compradorCreateWithoutTransaccionInput, compradorUncheckedCreateWithoutTransaccionInput>
    connectOrCreate?: compradorCreateOrConnectWithoutTransaccionInput
    upsert?: compradorUpsertWithoutTransaccionInput
    connect?: compradorWhereUniqueInput
    update?: XOR<XOR<compradorUpdateToOneWithWhereWithoutTransaccionInput, compradorUpdateWithoutTransaccionInput>, compradorUncheckedUpdateWithoutTransaccionInput>
  }

  export type productoUpdateOneRequiredWithoutTransaccionNestedInput = {
    create?: XOR<productoCreateWithoutTransaccionInput, productoUncheckedCreateWithoutTransaccionInput>
    connectOrCreate?: productoCreateOrConnectWithoutTransaccionInput
    upsert?: productoUpsertWithoutTransaccionInput
    connect?: productoWhereUniqueInput
    update?: XOR<XOR<productoUpdateToOneWithWhereWithoutTransaccionInput, productoUpdateWithoutTransaccionInput>, productoUncheckedUpdateWithoutTransaccionInput>
  }

  export type artesanoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<artesanoCreateWithoutUsuarioInput, artesanoUncheckedCreateWithoutUsuarioInput> | artesanoCreateWithoutUsuarioInput[] | artesanoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: artesanoCreateOrConnectWithoutUsuarioInput | artesanoCreateOrConnectWithoutUsuarioInput[]
    connect?: artesanoWhereUniqueInput | artesanoWhereUniqueInput[]
  }

  export type artesanoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<artesanoCreateWithoutUsuarioInput, artesanoUncheckedCreateWithoutUsuarioInput> | artesanoCreateWithoutUsuarioInput[] | artesanoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: artesanoCreateOrConnectWithoutUsuarioInput | artesanoCreateOrConnectWithoutUsuarioInput[]
    connect?: artesanoWhereUniqueInput | artesanoWhereUniqueInput[]
  }

  export type artesanoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<artesanoCreateWithoutUsuarioInput, artesanoUncheckedCreateWithoutUsuarioInput> | artesanoCreateWithoutUsuarioInput[] | artesanoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: artesanoCreateOrConnectWithoutUsuarioInput | artesanoCreateOrConnectWithoutUsuarioInput[]
    upsert?: artesanoUpsertWithWhereUniqueWithoutUsuarioInput | artesanoUpsertWithWhereUniqueWithoutUsuarioInput[]
    set?: artesanoWhereUniqueInput | artesanoWhereUniqueInput[]
    disconnect?: artesanoWhereUniqueInput | artesanoWhereUniqueInput[]
    delete?: artesanoWhereUniqueInput | artesanoWhereUniqueInput[]
    connect?: artesanoWhereUniqueInput | artesanoWhereUniqueInput[]
    update?: artesanoUpdateWithWhereUniqueWithoutUsuarioInput | artesanoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: artesanoUpdateManyWithWhereWithoutUsuarioInput | artesanoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: artesanoScalarWhereInput | artesanoScalarWhereInput[]
  }

  export type artesanoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<artesanoCreateWithoutUsuarioInput, artesanoUncheckedCreateWithoutUsuarioInput> | artesanoCreateWithoutUsuarioInput[] | artesanoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: artesanoCreateOrConnectWithoutUsuarioInput | artesanoCreateOrConnectWithoutUsuarioInput[]
    upsert?: artesanoUpsertWithWhereUniqueWithoutUsuarioInput | artesanoUpsertWithWhereUniqueWithoutUsuarioInput[]
    set?: artesanoWhereUniqueInput | artesanoWhereUniqueInput[]
    disconnect?: artesanoWhereUniqueInput | artesanoWhereUniqueInput[]
    delete?: artesanoWhereUniqueInput | artesanoWhereUniqueInput[]
    connect?: artesanoWhereUniqueInput | artesanoWhereUniqueInput[]
    update?: artesanoUpdateWithWhereUniqueWithoutUsuarioInput | artesanoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: artesanoUpdateManyWithWhereWithoutUsuarioInput | artesanoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: artesanoScalarWhereInput | artesanoScalarWhereInput[]
  }

  export type productoCreateNestedManyWithoutArtesanoInput = {
    create?: XOR<productoCreateWithoutArtesanoInput, productoUncheckedCreateWithoutArtesanoInput> | productoCreateWithoutArtesanoInput[] | productoUncheckedCreateWithoutArtesanoInput[]
    connectOrCreate?: productoCreateOrConnectWithoutArtesanoInput | productoCreateOrConnectWithoutArtesanoInput[]
    createMany?: productoCreateManyArtesanoInputEnvelope
    connect?: productoWhereUniqueInput | productoWhereUniqueInput[]
  }

  export type usuarioCreateNestedManyWithoutArtesanoInput = {
    create?: XOR<usuarioCreateWithoutArtesanoInput, usuarioUncheckedCreateWithoutArtesanoInput> | usuarioCreateWithoutArtesanoInput[] | usuarioUncheckedCreateWithoutArtesanoInput[]
    connectOrCreate?: usuarioCreateOrConnectWithoutArtesanoInput | usuarioCreateOrConnectWithoutArtesanoInput[]
    connect?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
  }

  export type productoUncheckedCreateNestedManyWithoutArtesanoInput = {
    create?: XOR<productoCreateWithoutArtesanoInput, productoUncheckedCreateWithoutArtesanoInput> | productoCreateWithoutArtesanoInput[] | productoUncheckedCreateWithoutArtesanoInput[]
    connectOrCreate?: productoCreateOrConnectWithoutArtesanoInput | productoCreateOrConnectWithoutArtesanoInput[]
    createMany?: productoCreateManyArtesanoInputEnvelope
    connect?: productoWhereUniqueInput | productoWhereUniqueInput[]
  }

  export type usuarioUncheckedCreateNestedManyWithoutArtesanoInput = {
    create?: XOR<usuarioCreateWithoutArtesanoInput, usuarioUncheckedCreateWithoutArtesanoInput> | usuarioCreateWithoutArtesanoInput[] | usuarioUncheckedCreateWithoutArtesanoInput[]
    connectOrCreate?: usuarioCreateOrConnectWithoutArtesanoInput | usuarioCreateOrConnectWithoutArtesanoInput[]
    connect?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
  }

  export type productoUpdateManyWithoutArtesanoNestedInput = {
    create?: XOR<productoCreateWithoutArtesanoInput, productoUncheckedCreateWithoutArtesanoInput> | productoCreateWithoutArtesanoInput[] | productoUncheckedCreateWithoutArtesanoInput[]
    connectOrCreate?: productoCreateOrConnectWithoutArtesanoInput | productoCreateOrConnectWithoutArtesanoInput[]
    upsert?: productoUpsertWithWhereUniqueWithoutArtesanoInput | productoUpsertWithWhereUniqueWithoutArtesanoInput[]
    createMany?: productoCreateManyArtesanoInputEnvelope
    set?: productoWhereUniqueInput | productoWhereUniqueInput[]
    disconnect?: productoWhereUniqueInput | productoWhereUniqueInput[]
    delete?: productoWhereUniqueInput | productoWhereUniqueInput[]
    connect?: productoWhereUniqueInput | productoWhereUniqueInput[]
    update?: productoUpdateWithWhereUniqueWithoutArtesanoInput | productoUpdateWithWhereUniqueWithoutArtesanoInput[]
    updateMany?: productoUpdateManyWithWhereWithoutArtesanoInput | productoUpdateManyWithWhereWithoutArtesanoInput[]
    deleteMany?: productoScalarWhereInput | productoScalarWhereInput[]
  }

  export type usuarioUpdateManyWithoutArtesanoNestedInput = {
    create?: XOR<usuarioCreateWithoutArtesanoInput, usuarioUncheckedCreateWithoutArtesanoInput> | usuarioCreateWithoutArtesanoInput[] | usuarioUncheckedCreateWithoutArtesanoInput[]
    connectOrCreate?: usuarioCreateOrConnectWithoutArtesanoInput | usuarioCreateOrConnectWithoutArtesanoInput[]
    upsert?: usuarioUpsertWithWhereUniqueWithoutArtesanoInput | usuarioUpsertWithWhereUniqueWithoutArtesanoInput[]
    set?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    disconnect?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    delete?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    connect?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    update?: usuarioUpdateWithWhereUniqueWithoutArtesanoInput | usuarioUpdateWithWhereUniqueWithoutArtesanoInput[]
    updateMany?: usuarioUpdateManyWithWhereWithoutArtesanoInput | usuarioUpdateManyWithWhereWithoutArtesanoInput[]
    deleteMany?: usuarioScalarWhereInput | usuarioScalarWhereInput[]
  }

  export type productoUncheckedUpdateManyWithoutArtesanoNestedInput = {
    create?: XOR<productoCreateWithoutArtesanoInput, productoUncheckedCreateWithoutArtesanoInput> | productoCreateWithoutArtesanoInput[] | productoUncheckedCreateWithoutArtesanoInput[]
    connectOrCreate?: productoCreateOrConnectWithoutArtesanoInput | productoCreateOrConnectWithoutArtesanoInput[]
    upsert?: productoUpsertWithWhereUniqueWithoutArtesanoInput | productoUpsertWithWhereUniqueWithoutArtesanoInput[]
    createMany?: productoCreateManyArtesanoInputEnvelope
    set?: productoWhereUniqueInput | productoWhereUniqueInput[]
    disconnect?: productoWhereUniqueInput | productoWhereUniqueInput[]
    delete?: productoWhereUniqueInput | productoWhereUniqueInput[]
    connect?: productoWhereUniqueInput | productoWhereUniqueInput[]
    update?: productoUpdateWithWhereUniqueWithoutArtesanoInput | productoUpdateWithWhereUniqueWithoutArtesanoInput[]
    updateMany?: productoUpdateManyWithWhereWithoutArtesanoInput | productoUpdateManyWithWhereWithoutArtesanoInput[]
    deleteMany?: productoScalarWhereInput | productoScalarWhereInput[]
  }

  export type usuarioUncheckedUpdateManyWithoutArtesanoNestedInput = {
    create?: XOR<usuarioCreateWithoutArtesanoInput, usuarioUncheckedCreateWithoutArtesanoInput> | usuarioCreateWithoutArtesanoInput[] | usuarioUncheckedCreateWithoutArtesanoInput[]
    connectOrCreate?: usuarioCreateOrConnectWithoutArtesanoInput | usuarioCreateOrConnectWithoutArtesanoInput[]
    upsert?: usuarioUpsertWithWhereUniqueWithoutArtesanoInput | usuarioUpsertWithWhereUniqueWithoutArtesanoInput[]
    set?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    disconnect?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    delete?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    connect?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    update?: usuarioUpdateWithWhereUniqueWithoutArtesanoInput | usuarioUpdateWithWhereUniqueWithoutArtesanoInput[]
    updateMany?: usuarioUpdateManyWithWhereWithoutArtesanoInput | usuarioUpdateManyWithWhereWithoutArtesanoInput[]
    deleteMany?: usuarioScalarWhereInput | usuarioScalarWhereInput[]
  }

  export type productoCreateNestedManyWithoutUserCategoriaInput = {
    create?: XOR<productoCreateWithoutUserCategoriaInput, productoUncheckedCreateWithoutUserCategoriaInput> | productoCreateWithoutUserCategoriaInput[] | productoUncheckedCreateWithoutUserCategoriaInput[]
    connectOrCreate?: productoCreateOrConnectWithoutUserCategoriaInput | productoCreateOrConnectWithoutUserCategoriaInput[]
    createMany?: productoCreateManyUserCategoriaInputEnvelope
    connect?: productoWhereUniqueInput | productoWhereUniqueInput[]
  }

  export type productoUncheckedCreateNestedManyWithoutUserCategoriaInput = {
    create?: XOR<productoCreateWithoutUserCategoriaInput, productoUncheckedCreateWithoutUserCategoriaInput> | productoCreateWithoutUserCategoriaInput[] | productoUncheckedCreateWithoutUserCategoriaInput[]
    connectOrCreate?: productoCreateOrConnectWithoutUserCategoriaInput | productoCreateOrConnectWithoutUserCategoriaInput[]
    createMany?: productoCreateManyUserCategoriaInputEnvelope
    connect?: productoWhereUniqueInput | productoWhereUniqueInput[]
  }

  export type productoUpdateManyWithoutUserCategoriaNestedInput = {
    create?: XOR<productoCreateWithoutUserCategoriaInput, productoUncheckedCreateWithoutUserCategoriaInput> | productoCreateWithoutUserCategoriaInput[] | productoUncheckedCreateWithoutUserCategoriaInput[]
    connectOrCreate?: productoCreateOrConnectWithoutUserCategoriaInput | productoCreateOrConnectWithoutUserCategoriaInput[]
    upsert?: productoUpsertWithWhereUniqueWithoutUserCategoriaInput | productoUpsertWithWhereUniqueWithoutUserCategoriaInput[]
    createMany?: productoCreateManyUserCategoriaInputEnvelope
    set?: productoWhereUniqueInput | productoWhereUniqueInput[]
    disconnect?: productoWhereUniqueInput | productoWhereUniqueInput[]
    delete?: productoWhereUniqueInput | productoWhereUniqueInput[]
    connect?: productoWhereUniqueInput | productoWhereUniqueInput[]
    update?: productoUpdateWithWhereUniqueWithoutUserCategoriaInput | productoUpdateWithWhereUniqueWithoutUserCategoriaInput[]
    updateMany?: productoUpdateManyWithWhereWithoutUserCategoriaInput | productoUpdateManyWithWhereWithoutUserCategoriaInput[]
    deleteMany?: productoScalarWhereInput | productoScalarWhereInput[]
  }

  export type productoUncheckedUpdateManyWithoutUserCategoriaNestedInput = {
    create?: XOR<productoCreateWithoutUserCategoriaInput, productoUncheckedCreateWithoutUserCategoriaInput> | productoCreateWithoutUserCategoriaInput[] | productoUncheckedCreateWithoutUserCategoriaInput[]
    connectOrCreate?: productoCreateOrConnectWithoutUserCategoriaInput | productoCreateOrConnectWithoutUserCategoriaInput[]
    upsert?: productoUpsertWithWhereUniqueWithoutUserCategoriaInput | productoUpsertWithWhereUniqueWithoutUserCategoriaInput[]
    createMany?: productoCreateManyUserCategoriaInputEnvelope
    set?: productoWhereUniqueInput | productoWhereUniqueInput[]
    disconnect?: productoWhereUniqueInput | productoWhereUniqueInput[]
    delete?: productoWhereUniqueInput | productoWhereUniqueInput[]
    connect?: productoWhereUniqueInput | productoWhereUniqueInput[]
    update?: productoUpdateWithWhereUniqueWithoutUserCategoriaInput | productoUpdateWithWhereUniqueWithoutUserCategoriaInput[]
    updateMany?: productoUpdateManyWithWhereWithoutUserCategoriaInput | productoUpdateManyWithWhereWithoutUserCategoriaInput[]
    deleteMany?: productoScalarWhereInput | productoScalarWhereInput[]
  }

  export type compradorCreateNestedOneWithoutCarritoInput = {
    create?: XOR<compradorCreateWithoutCarritoInput, compradorUncheckedCreateWithoutCarritoInput>
    connectOrCreate?: compradorCreateOrConnectWithoutCarritoInput
    connect?: compradorWhereUniqueInput
  }

  export type compradorUpdateOneRequiredWithoutCarritoNestedInput = {
    create?: XOR<compradorCreateWithoutCarritoInput, compradorUncheckedCreateWithoutCarritoInput>
    connectOrCreate?: compradorCreateOrConnectWithoutCarritoInput
    upsert?: compradorUpsertWithoutCarritoInput
    connect?: compradorWhereUniqueInput
    update?: XOR<XOR<compradorUpdateToOneWithWhereWithoutCarritoInput, compradorUpdateWithoutCarritoInput>, compradorUncheckedUpdateWithoutCarritoInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type carritoCreateWithoutCompradorInput = {
    fecha_carrito: Date | string
  }

  export type carritoUncheckedCreateWithoutCompradorInput = {
    id_carrito?: number
    fecha_carrito: Date | string
  }

  export type carritoCreateOrConnectWithoutCompradorInput = {
    where: carritoWhereUniqueInput
    create: XOR<carritoCreateWithoutCompradorInput, carritoUncheckedCreateWithoutCompradorInput>
  }

  export type carritoCreateManyCompradorInputEnvelope = {
    data: carritoCreateManyCompradorInput | carritoCreateManyCompradorInput[]
    skipDuplicates?: boolean
  }

  export type transaccionCreateWithoutCompradorInput = {
    cantidad_trans?: number | null
    fecha_trans: Date | string
    producto: productoCreateNestedOneWithoutTransaccionInput
  }

  export type transaccionUncheckedCreateWithoutCompradorInput = {
    id_transaccion?: number
    cantidad_trans?: number | null
    fecha_trans: Date | string
    ID_Producto: number
  }

  export type transaccionCreateOrConnectWithoutCompradorInput = {
    where: transaccionWhereUniqueInput
    create: XOR<transaccionCreateWithoutCompradorInput, transaccionUncheckedCreateWithoutCompradorInput>
  }

  export type transaccionCreateManyCompradorInputEnvelope = {
    data: transaccionCreateManyCompradorInput | transaccionCreateManyCompradorInput[]
    skipDuplicates?: boolean
  }

  export type carritoUpsertWithWhereUniqueWithoutCompradorInput = {
    where: carritoWhereUniqueInput
    update: XOR<carritoUpdateWithoutCompradorInput, carritoUncheckedUpdateWithoutCompradorInput>
    create: XOR<carritoCreateWithoutCompradorInput, carritoUncheckedCreateWithoutCompradorInput>
  }

  export type carritoUpdateWithWhereUniqueWithoutCompradorInput = {
    where: carritoWhereUniqueInput
    data: XOR<carritoUpdateWithoutCompradorInput, carritoUncheckedUpdateWithoutCompradorInput>
  }

  export type carritoUpdateManyWithWhereWithoutCompradorInput = {
    where: carritoScalarWhereInput
    data: XOR<carritoUpdateManyMutationInput, carritoUncheckedUpdateManyWithoutCompradorInput>
  }

  export type carritoScalarWhereInput = {
    AND?: carritoScalarWhereInput | carritoScalarWhereInput[]
    OR?: carritoScalarWhereInput[]
    NOT?: carritoScalarWhereInput | carritoScalarWhereInput[]
    id_carrito?: IntFilter<"carrito"> | number
    fecha_carrito?: DateTimeFilter<"carrito"> | Date | string
    ID_Comprador?: IntFilter<"carrito"> | number
  }

  export type transaccionUpsertWithWhereUniqueWithoutCompradorInput = {
    where: transaccionWhereUniqueInput
    update: XOR<transaccionUpdateWithoutCompradorInput, transaccionUncheckedUpdateWithoutCompradorInput>
    create: XOR<transaccionCreateWithoutCompradorInput, transaccionUncheckedCreateWithoutCompradorInput>
  }

  export type transaccionUpdateWithWhereUniqueWithoutCompradorInput = {
    where: transaccionWhereUniqueInput
    data: XOR<transaccionUpdateWithoutCompradorInput, transaccionUncheckedUpdateWithoutCompradorInput>
  }

  export type transaccionUpdateManyWithWhereWithoutCompradorInput = {
    where: transaccionScalarWhereInput
    data: XOR<transaccionUpdateManyMutationInput, transaccionUncheckedUpdateManyWithoutCompradorInput>
  }

  export type transaccionScalarWhereInput = {
    AND?: transaccionScalarWhereInput | transaccionScalarWhereInput[]
    OR?: transaccionScalarWhereInput[]
    NOT?: transaccionScalarWhereInput | transaccionScalarWhereInput[]
    id_transaccion?: IntFilter<"transaccion"> | number
    cantidad_trans?: IntNullableFilter<"transaccion"> | number | null
    fecha_trans?: DateTimeFilter<"transaccion"> | Date | string
    ID_Comprador?: IntFilter<"transaccion"> | number
    ID_Producto?: IntFilter<"transaccion"> | number
  }

  export type artesanoCreateWithoutProductosInput = {
    descripcion_art: string
    ubicacion_art: string
    telefono_art: string
    nombre_art?: string | null
    Usuario?: usuarioCreateNestedManyWithoutArtesanoInput
  }

  export type artesanoUncheckedCreateWithoutProductosInput = {
    id_artesano?: number
    descripcion_art: string
    ubicacion_art: string
    telefono_art: string
    nombre_art?: string | null
    Usuario?: usuarioUncheckedCreateNestedManyWithoutArtesanoInput
  }

  export type artesanoCreateOrConnectWithoutProductosInput = {
    where: artesanoWhereUniqueInput
    create: XOR<artesanoCreateWithoutProductosInput, artesanoUncheckedCreateWithoutProductosInput>
  }

  export type categoriaCreateWithoutProductosInput = {
    nombre_cat?: string | null
    descripcion_cat: string
  }

  export type categoriaUncheckedCreateWithoutProductosInput = {
    id_categoria?: number
    nombre_cat?: string | null
    descripcion_cat: string
  }

  export type categoriaCreateOrConnectWithoutProductosInput = {
    where: categoriaWhereUniqueInput
    create: XOR<categoriaCreateWithoutProductosInput, categoriaUncheckedCreateWithoutProductosInput>
  }

  export type transaccionCreateWithoutProductoInput = {
    cantidad_trans?: number | null
    fecha_trans: Date | string
    Comprador: compradorCreateNestedOneWithoutTransaccionInput
  }

  export type transaccionUncheckedCreateWithoutProductoInput = {
    id_transaccion?: number
    cantidad_trans?: number | null
    fecha_trans: Date | string
    ID_Comprador: number
  }

  export type transaccionCreateOrConnectWithoutProductoInput = {
    where: transaccionWhereUniqueInput
    create: XOR<transaccionCreateWithoutProductoInput, transaccionUncheckedCreateWithoutProductoInput>
  }

  export type transaccionCreateManyProductoInputEnvelope = {
    data: transaccionCreateManyProductoInput | transaccionCreateManyProductoInput[]
    skipDuplicates?: boolean
  }

  export type artesanoUpsertWithoutProductosInput = {
    update: XOR<artesanoUpdateWithoutProductosInput, artesanoUncheckedUpdateWithoutProductosInput>
    create: XOR<artesanoCreateWithoutProductosInput, artesanoUncheckedCreateWithoutProductosInput>
    where?: artesanoWhereInput
  }

  export type artesanoUpdateToOneWithWhereWithoutProductosInput = {
    where?: artesanoWhereInput
    data: XOR<artesanoUpdateWithoutProductosInput, artesanoUncheckedUpdateWithoutProductosInput>
  }

  export type artesanoUpdateWithoutProductosInput = {
    descripcion_art?: StringFieldUpdateOperationsInput | string
    ubicacion_art?: StringFieldUpdateOperationsInput | string
    telefono_art?: StringFieldUpdateOperationsInput | string
    nombre_art?: NullableStringFieldUpdateOperationsInput | string | null
    Usuario?: usuarioUpdateManyWithoutArtesanoNestedInput
  }

  export type artesanoUncheckedUpdateWithoutProductosInput = {
    id_artesano?: IntFieldUpdateOperationsInput | number
    descripcion_art?: StringFieldUpdateOperationsInput | string
    ubicacion_art?: StringFieldUpdateOperationsInput | string
    telefono_art?: StringFieldUpdateOperationsInput | string
    nombre_art?: NullableStringFieldUpdateOperationsInput | string | null
    Usuario?: usuarioUncheckedUpdateManyWithoutArtesanoNestedInput
  }

  export type categoriaUpsertWithoutProductosInput = {
    update: XOR<categoriaUpdateWithoutProductosInput, categoriaUncheckedUpdateWithoutProductosInput>
    create: XOR<categoriaCreateWithoutProductosInput, categoriaUncheckedCreateWithoutProductosInput>
    where?: categoriaWhereInput
  }

  export type categoriaUpdateToOneWithWhereWithoutProductosInput = {
    where?: categoriaWhereInput
    data: XOR<categoriaUpdateWithoutProductosInput, categoriaUncheckedUpdateWithoutProductosInput>
  }

  export type categoriaUpdateWithoutProductosInput = {
    nombre_cat?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion_cat?: StringFieldUpdateOperationsInput | string
  }

  export type categoriaUncheckedUpdateWithoutProductosInput = {
    id_categoria?: IntFieldUpdateOperationsInput | number
    nombre_cat?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion_cat?: StringFieldUpdateOperationsInput | string
  }

  export type transaccionUpsertWithWhereUniqueWithoutProductoInput = {
    where: transaccionWhereUniqueInput
    update: XOR<transaccionUpdateWithoutProductoInput, transaccionUncheckedUpdateWithoutProductoInput>
    create: XOR<transaccionCreateWithoutProductoInput, transaccionUncheckedCreateWithoutProductoInput>
  }

  export type transaccionUpdateWithWhereUniqueWithoutProductoInput = {
    where: transaccionWhereUniqueInput
    data: XOR<transaccionUpdateWithoutProductoInput, transaccionUncheckedUpdateWithoutProductoInput>
  }

  export type transaccionUpdateManyWithWhereWithoutProductoInput = {
    where: transaccionScalarWhereInput
    data: XOR<transaccionUpdateManyMutationInput, transaccionUncheckedUpdateManyWithoutProductoInput>
  }

  export type compradorCreateWithoutTransaccionInput = {
    direccion_comp: string
    ciudad_comp: string
    telefono_comp: string
    nombre_comp?: string | null
    Carrito?: carritoCreateNestedManyWithoutCompradorInput
  }

  export type compradorUncheckedCreateWithoutTransaccionInput = {
    id_comprador?: number
    direccion_comp: string
    ciudad_comp: string
    telefono_comp: string
    nombre_comp?: string | null
    Carrito?: carritoUncheckedCreateNestedManyWithoutCompradorInput
  }

  export type compradorCreateOrConnectWithoutTransaccionInput = {
    where: compradorWhereUniqueInput
    create: XOR<compradorCreateWithoutTransaccionInput, compradorUncheckedCreateWithoutTransaccionInput>
  }

  export type productoCreateWithoutTransaccionInput = {
    nombre_prod?: string | null
    descripcion_prod: string
    categoria: string
    precio_prod?: number | null
    artesano: artesanoCreateNestedOneWithoutProductosInput
    UserCategoria: categoriaCreateNestedOneWithoutProductosInput
  }

  export type productoUncheckedCreateWithoutTransaccionInput = {
    id_producto?: number
    nombre_prod?: string | null
    descripcion_prod: string
    categoria: string
    precio_prod?: number | null
    ID_Artesano: number
    ID_Categoria: number
  }

  export type productoCreateOrConnectWithoutTransaccionInput = {
    where: productoWhereUniqueInput
    create: XOR<productoCreateWithoutTransaccionInput, productoUncheckedCreateWithoutTransaccionInput>
  }

  export type compradorUpsertWithoutTransaccionInput = {
    update: XOR<compradorUpdateWithoutTransaccionInput, compradorUncheckedUpdateWithoutTransaccionInput>
    create: XOR<compradorCreateWithoutTransaccionInput, compradorUncheckedCreateWithoutTransaccionInput>
    where?: compradorWhereInput
  }

  export type compradorUpdateToOneWithWhereWithoutTransaccionInput = {
    where?: compradorWhereInput
    data: XOR<compradorUpdateWithoutTransaccionInput, compradorUncheckedUpdateWithoutTransaccionInput>
  }

  export type compradorUpdateWithoutTransaccionInput = {
    direccion_comp?: StringFieldUpdateOperationsInput | string
    ciudad_comp?: StringFieldUpdateOperationsInput | string
    telefono_comp?: StringFieldUpdateOperationsInput | string
    nombre_comp?: NullableStringFieldUpdateOperationsInput | string | null
    Carrito?: carritoUpdateManyWithoutCompradorNestedInput
  }

  export type compradorUncheckedUpdateWithoutTransaccionInput = {
    id_comprador?: IntFieldUpdateOperationsInput | number
    direccion_comp?: StringFieldUpdateOperationsInput | string
    ciudad_comp?: StringFieldUpdateOperationsInput | string
    telefono_comp?: StringFieldUpdateOperationsInput | string
    nombre_comp?: NullableStringFieldUpdateOperationsInput | string | null
    Carrito?: carritoUncheckedUpdateManyWithoutCompradorNestedInput
  }

  export type productoUpsertWithoutTransaccionInput = {
    update: XOR<productoUpdateWithoutTransaccionInput, productoUncheckedUpdateWithoutTransaccionInput>
    create: XOR<productoCreateWithoutTransaccionInput, productoUncheckedCreateWithoutTransaccionInput>
    where?: productoWhereInput
  }

  export type productoUpdateToOneWithWhereWithoutTransaccionInput = {
    where?: productoWhereInput
    data: XOR<productoUpdateWithoutTransaccionInput, productoUncheckedUpdateWithoutTransaccionInput>
  }

  export type productoUpdateWithoutTransaccionInput = {
    nombre_prod?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion_prod?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    precio_prod?: NullableIntFieldUpdateOperationsInput | number | null
    artesano?: artesanoUpdateOneRequiredWithoutProductosNestedInput
    UserCategoria?: categoriaUpdateOneRequiredWithoutProductosNestedInput
  }

  export type productoUncheckedUpdateWithoutTransaccionInput = {
    id_producto?: IntFieldUpdateOperationsInput | number
    nombre_prod?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion_prod?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    precio_prod?: NullableIntFieldUpdateOperationsInput | number | null
    ID_Artesano?: IntFieldUpdateOperationsInput | number
    ID_Categoria?: IntFieldUpdateOperationsInput | number
  }

  export type artesanoCreateWithoutUsuarioInput = {
    descripcion_art: string
    ubicacion_art: string
    telefono_art: string
    nombre_art?: string | null
    Productos?: productoCreateNestedManyWithoutArtesanoInput
  }

  export type artesanoUncheckedCreateWithoutUsuarioInput = {
    id_artesano?: number
    descripcion_art: string
    ubicacion_art: string
    telefono_art: string
    nombre_art?: string | null
    Productos?: productoUncheckedCreateNestedManyWithoutArtesanoInput
  }

  export type artesanoCreateOrConnectWithoutUsuarioInput = {
    where: artesanoWhereUniqueInput
    create: XOR<artesanoCreateWithoutUsuarioInput, artesanoUncheckedCreateWithoutUsuarioInput>
  }

  export type artesanoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: artesanoWhereUniqueInput
    update: XOR<artesanoUpdateWithoutUsuarioInput, artesanoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<artesanoCreateWithoutUsuarioInput, artesanoUncheckedCreateWithoutUsuarioInput>
  }

  export type artesanoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: artesanoWhereUniqueInput
    data: XOR<artesanoUpdateWithoutUsuarioInput, artesanoUncheckedUpdateWithoutUsuarioInput>
  }

  export type artesanoUpdateManyWithWhereWithoutUsuarioInput = {
    where: artesanoScalarWhereInput
    data: XOR<artesanoUpdateManyMutationInput, artesanoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type artesanoScalarWhereInput = {
    AND?: artesanoScalarWhereInput | artesanoScalarWhereInput[]
    OR?: artesanoScalarWhereInput[]
    NOT?: artesanoScalarWhereInput | artesanoScalarWhereInput[]
    id_artesano?: IntFilter<"artesano"> | number
    descripcion_art?: StringFilter<"artesano"> | string
    ubicacion_art?: StringFilter<"artesano"> | string
    telefono_art?: StringFilter<"artesano"> | string
    nombre_art?: StringNullableFilter<"artesano"> | string | null
  }

  export type productoCreateWithoutArtesanoInput = {
    nombre_prod?: string | null
    descripcion_prod: string
    categoria: string
    precio_prod?: number | null
    UserCategoria: categoriaCreateNestedOneWithoutProductosInput
    Transaccion?: transaccionCreateNestedManyWithoutProductoInput
  }

  export type productoUncheckedCreateWithoutArtesanoInput = {
    id_producto?: number
    nombre_prod?: string | null
    descripcion_prod: string
    categoria: string
    precio_prod?: number | null
    ID_Categoria: number
    Transaccion?: transaccionUncheckedCreateNestedManyWithoutProductoInput
  }

  export type productoCreateOrConnectWithoutArtesanoInput = {
    where: productoWhereUniqueInput
    create: XOR<productoCreateWithoutArtesanoInput, productoUncheckedCreateWithoutArtesanoInput>
  }

  export type productoCreateManyArtesanoInputEnvelope = {
    data: productoCreateManyArtesanoInput | productoCreateManyArtesanoInput[]
    skipDuplicates?: boolean
  }

  export type usuarioCreateWithoutArtesanoInput = {
    nombre_usu?: string | null
    apellido_usu: string
    email_usu: string
    password_usu?: string | null
  }

  export type usuarioUncheckedCreateWithoutArtesanoInput = {
    id_usuario?: number
    nombre_usu?: string | null
    apellido_usu: string
    email_usu: string
    password_usu?: string | null
  }

  export type usuarioCreateOrConnectWithoutArtesanoInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutArtesanoInput, usuarioUncheckedCreateWithoutArtesanoInput>
  }

  export type productoUpsertWithWhereUniqueWithoutArtesanoInput = {
    where: productoWhereUniqueInput
    update: XOR<productoUpdateWithoutArtesanoInput, productoUncheckedUpdateWithoutArtesanoInput>
    create: XOR<productoCreateWithoutArtesanoInput, productoUncheckedCreateWithoutArtesanoInput>
  }

  export type productoUpdateWithWhereUniqueWithoutArtesanoInput = {
    where: productoWhereUniqueInput
    data: XOR<productoUpdateWithoutArtesanoInput, productoUncheckedUpdateWithoutArtesanoInput>
  }

  export type productoUpdateManyWithWhereWithoutArtesanoInput = {
    where: productoScalarWhereInput
    data: XOR<productoUpdateManyMutationInput, productoUncheckedUpdateManyWithoutArtesanoInput>
  }

  export type productoScalarWhereInput = {
    AND?: productoScalarWhereInput | productoScalarWhereInput[]
    OR?: productoScalarWhereInput[]
    NOT?: productoScalarWhereInput | productoScalarWhereInput[]
    id_producto?: IntFilter<"producto"> | number
    nombre_prod?: StringNullableFilter<"producto"> | string | null
    descripcion_prod?: StringFilter<"producto"> | string
    categoria?: StringFilter<"producto"> | string
    precio_prod?: IntNullableFilter<"producto"> | number | null
    ID_Artesano?: IntFilter<"producto"> | number
    ID_Categoria?: IntFilter<"producto"> | number
  }

  export type usuarioUpsertWithWhereUniqueWithoutArtesanoInput = {
    where: usuarioWhereUniqueInput
    update: XOR<usuarioUpdateWithoutArtesanoInput, usuarioUncheckedUpdateWithoutArtesanoInput>
    create: XOR<usuarioCreateWithoutArtesanoInput, usuarioUncheckedCreateWithoutArtesanoInput>
  }

  export type usuarioUpdateWithWhereUniqueWithoutArtesanoInput = {
    where: usuarioWhereUniqueInput
    data: XOR<usuarioUpdateWithoutArtesanoInput, usuarioUncheckedUpdateWithoutArtesanoInput>
  }

  export type usuarioUpdateManyWithWhereWithoutArtesanoInput = {
    where: usuarioScalarWhereInput
    data: XOR<usuarioUpdateManyMutationInput, usuarioUncheckedUpdateManyWithoutArtesanoInput>
  }

  export type usuarioScalarWhereInput = {
    AND?: usuarioScalarWhereInput | usuarioScalarWhereInput[]
    OR?: usuarioScalarWhereInput[]
    NOT?: usuarioScalarWhereInput | usuarioScalarWhereInput[]
    id_usuario?: IntFilter<"usuario"> | number
    nombre_usu?: StringNullableFilter<"usuario"> | string | null
    apellido_usu?: StringFilter<"usuario"> | string
    email_usu?: StringFilter<"usuario"> | string
    password_usu?: StringNullableFilter<"usuario"> | string | null
  }

  export type productoCreateWithoutUserCategoriaInput = {
    nombre_prod?: string | null
    descripcion_prod: string
    categoria: string
    precio_prod?: number | null
    artesano: artesanoCreateNestedOneWithoutProductosInput
    Transaccion?: transaccionCreateNestedManyWithoutProductoInput
  }

  export type productoUncheckedCreateWithoutUserCategoriaInput = {
    id_producto?: number
    nombre_prod?: string | null
    descripcion_prod: string
    categoria: string
    precio_prod?: number | null
    ID_Artesano: number
    Transaccion?: transaccionUncheckedCreateNestedManyWithoutProductoInput
  }

  export type productoCreateOrConnectWithoutUserCategoriaInput = {
    where: productoWhereUniqueInput
    create: XOR<productoCreateWithoutUserCategoriaInput, productoUncheckedCreateWithoutUserCategoriaInput>
  }

  export type productoCreateManyUserCategoriaInputEnvelope = {
    data: productoCreateManyUserCategoriaInput | productoCreateManyUserCategoriaInput[]
    skipDuplicates?: boolean
  }

  export type productoUpsertWithWhereUniqueWithoutUserCategoriaInput = {
    where: productoWhereUniqueInput
    update: XOR<productoUpdateWithoutUserCategoriaInput, productoUncheckedUpdateWithoutUserCategoriaInput>
    create: XOR<productoCreateWithoutUserCategoriaInput, productoUncheckedCreateWithoutUserCategoriaInput>
  }

  export type productoUpdateWithWhereUniqueWithoutUserCategoriaInput = {
    where: productoWhereUniqueInput
    data: XOR<productoUpdateWithoutUserCategoriaInput, productoUncheckedUpdateWithoutUserCategoriaInput>
  }

  export type productoUpdateManyWithWhereWithoutUserCategoriaInput = {
    where: productoScalarWhereInput
    data: XOR<productoUpdateManyMutationInput, productoUncheckedUpdateManyWithoutUserCategoriaInput>
  }

  export type compradorCreateWithoutCarritoInput = {
    direccion_comp: string
    ciudad_comp: string
    telefono_comp: string
    nombre_comp?: string | null
    Transaccion?: transaccionCreateNestedManyWithoutCompradorInput
  }

  export type compradorUncheckedCreateWithoutCarritoInput = {
    id_comprador?: number
    direccion_comp: string
    ciudad_comp: string
    telefono_comp: string
    nombre_comp?: string | null
    Transaccion?: transaccionUncheckedCreateNestedManyWithoutCompradorInput
  }

  export type compradorCreateOrConnectWithoutCarritoInput = {
    where: compradorWhereUniqueInput
    create: XOR<compradorCreateWithoutCarritoInput, compradorUncheckedCreateWithoutCarritoInput>
  }

  export type compradorUpsertWithoutCarritoInput = {
    update: XOR<compradorUpdateWithoutCarritoInput, compradorUncheckedUpdateWithoutCarritoInput>
    create: XOR<compradorCreateWithoutCarritoInput, compradorUncheckedCreateWithoutCarritoInput>
    where?: compradorWhereInput
  }

  export type compradorUpdateToOneWithWhereWithoutCarritoInput = {
    where?: compradorWhereInput
    data: XOR<compradorUpdateWithoutCarritoInput, compradorUncheckedUpdateWithoutCarritoInput>
  }

  export type compradorUpdateWithoutCarritoInput = {
    direccion_comp?: StringFieldUpdateOperationsInput | string
    ciudad_comp?: StringFieldUpdateOperationsInput | string
    telefono_comp?: StringFieldUpdateOperationsInput | string
    nombre_comp?: NullableStringFieldUpdateOperationsInput | string | null
    Transaccion?: transaccionUpdateManyWithoutCompradorNestedInput
  }

  export type compradorUncheckedUpdateWithoutCarritoInput = {
    id_comprador?: IntFieldUpdateOperationsInput | number
    direccion_comp?: StringFieldUpdateOperationsInput | string
    ciudad_comp?: StringFieldUpdateOperationsInput | string
    telefono_comp?: StringFieldUpdateOperationsInput | string
    nombre_comp?: NullableStringFieldUpdateOperationsInput | string | null
    Transaccion?: transaccionUncheckedUpdateManyWithoutCompradorNestedInput
  }

  export type carritoCreateManyCompradorInput = {
    id_carrito?: number
    fecha_carrito: Date | string
  }

  export type transaccionCreateManyCompradorInput = {
    id_transaccion?: number
    cantidad_trans?: number | null
    fecha_trans: Date | string
    ID_Producto: number
  }

  export type carritoUpdateWithoutCompradorInput = {
    fecha_carrito?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type carritoUncheckedUpdateWithoutCompradorInput = {
    id_carrito?: IntFieldUpdateOperationsInput | number
    fecha_carrito?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type carritoUncheckedUpdateManyWithoutCompradorInput = {
    id_carrito?: IntFieldUpdateOperationsInput | number
    fecha_carrito?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transaccionUpdateWithoutCompradorInput = {
    cantidad_trans?: NullableIntFieldUpdateOperationsInput | number | null
    fecha_trans?: DateTimeFieldUpdateOperationsInput | Date | string
    producto?: productoUpdateOneRequiredWithoutTransaccionNestedInput
  }

  export type transaccionUncheckedUpdateWithoutCompradorInput = {
    id_transaccion?: IntFieldUpdateOperationsInput | number
    cantidad_trans?: NullableIntFieldUpdateOperationsInput | number | null
    fecha_trans?: DateTimeFieldUpdateOperationsInput | Date | string
    ID_Producto?: IntFieldUpdateOperationsInput | number
  }

  export type transaccionUncheckedUpdateManyWithoutCompradorInput = {
    id_transaccion?: IntFieldUpdateOperationsInput | number
    cantidad_trans?: NullableIntFieldUpdateOperationsInput | number | null
    fecha_trans?: DateTimeFieldUpdateOperationsInput | Date | string
    ID_Producto?: IntFieldUpdateOperationsInput | number
  }

  export type transaccionCreateManyProductoInput = {
    id_transaccion?: number
    cantidad_trans?: number | null
    fecha_trans: Date | string
    ID_Comprador: number
  }

  export type transaccionUpdateWithoutProductoInput = {
    cantidad_trans?: NullableIntFieldUpdateOperationsInput | number | null
    fecha_trans?: DateTimeFieldUpdateOperationsInput | Date | string
    Comprador?: compradorUpdateOneRequiredWithoutTransaccionNestedInput
  }

  export type transaccionUncheckedUpdateWithoutProductoInput = {
    id_transaccion?: IntFieldUpdateOperationsInput | number
    cantidad_trans?: NullableIntFieldUpdateOperationsInput | number | null
    fecha_trans?: DateTimeFieldUpdateOperationsInput | Date | string
    ID_Comprador?: IntFieldUpdateOperationsInput | number
  }

  export type transaccionUncheckedUpdateManyWithoutProductoInput = {
    id_transaccion?: IntFieldUpdateOperationsInput | number
    cantidad_trans?: NullableIntFieldUpdateOperationsInput | number | null
    fecha_trans?: DateTimeFieldUpdateOperationsInput | Date | string
    ID_Comprador?: IntFieldUpdateOperationsInput | number
  }

  export type artesanoUpdateWithoutUsuarioInput = {
    descripcion_art?: StringFieldUpdateOperationsInput | string
    ubicacion_art?: StringFieldUpdateOperationsInput | string
    telefono_art?: StringFieldUpdateOperationsInput | string
    nombre_art?: NullableStringFieldUpdateOperationsInput | string | null
    Productos?: productoUpdateManyWithoutArtesanoNestedInput
  }

  export type artesanoUncheckedUpdateWithoutUsuarioInput = {
    id_artesano?: IntFieldUpdateOperationsInput | number
    descripcion_art?: StringFieldUpdateOperationsInput | string
    ubicacion_art?: StringFieldUpdateOperationsInput | string
    telefono_art?: StringFieldUpdateOperationsInput | string
    nombre_art?: NullableStringFieldUpdateOperationsInput | string | null
    Productos?: productoUncheckedUpdateManyWithoutArtesanoNestedInput
  }

  export type artesanoUncheckedUpdateManyWithoutUsuarioInput = {
    id_artesano?: IntFieldUpdateOperationsInput | number
    descripcion_art?: StringFieldUpdateOperationsInput | string
    ubicacion_art?: StringFieldUpdateOperationsInput | string
    telefono_art?: StringFieldUpdateOperationsInput | string
    nombre_art?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productoCreateManyArtesanoInput = {
    id_producto?: number
    nombre_prod?: string | null
    descripcion_prod: string
    categoria: string
    precio_prod?: number | null
    ID_Categoria: number
  }

  export type productoUpdateWithoutArtesanoInput = {
    nombre_prod?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion_prod?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    precio_prod?: NullableIntFieldUpdateOperationsInput | number | null
    UserCategoria?: categoriaUpdateOneRequiredWithoutProductosNestedInput
    Transaccion?: transaccionUpdateManyWithoutProductoNestedInput
  }

  export type productoUncheckedUpdateWithoutArtesanoInput = {
    id_producto?: IntFieldUpdateOperationsInput | number
    nombre_prod?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion_prod?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    precio_prod?: NullableIntFieldUpdateOperationsInput | number | null
    ID_Categoria?: IntFieldUpdateOperationsInput | number
    Transaccion?: transaccionUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type productoUncheckedUpdateManyWithoutArtesanoInput = {
    id_producto?: IntFieldUpdateOperationsInput | number
    nombre_prod?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion_prod?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    precio_prod?: NullableIntFieldUpdateOperationsInput | number | null
    ID_Categoria?: IntFieldUpdateOperationsInput | number
  }

  export type usuarioUpdateWithoutArtesanoInput = {
    nombre_usu?: NullableStringFieldUpdateOperationsInput | string | null
    apellido_usu?: StringFieldUpdateOperationsInput | string
    email_usu?: StringFieldUpdateOperationsInput | string
    password_usu?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usuarioUncheckedUpdateWithoutArtesanoInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    nombre_usu?: NullableStringFieldUpdateOperationsInput | string | null
    apellido_usu?: StringFieldUpdateOperationsInput | string
    email_usu?: StringFieldUpdateOperationsInput | string
    password_usu?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usuarioUncheckedUpdateManyWithoutArtesanoInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    nombre_usu?: NullableStringFieldUpdateOperationsInput | string | null
    apellido_usu?: StringFieldUpdateOperationsInput | string
    email_usu?: StringFieldUpdateOperationsInput | string
    password_usu?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productoCreateManyUserCategoriaInput = {
    id_producto?: number
    nombre_prod?: string | null
    descripcion_prod: string
    categoria: string
    precio_prod?: number | null
    ID_Artesano: number
  }

  export type productoUpdateWithoutUserCategoriaInput = {
    nombre_prod?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion_prod?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    precio_prod?: NullableIntFieldUpdateOperationsInput | number | null
    artesano?: artesanoUpdateOneRequiredWithoutProductosNestedInput
    Transaccion?: transaccionUpdateManyWithoutProductoNestedInput
  }

  export type productoUncheckedUpdateWithoutUserCategoriaInput = {
    id_producto?: IntFieldUpdateOperationsInput | number
    nombre_prod?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion_prod?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    precio_prod?: NullableIntFieldUpdateOperationsInput | number | null
    ID_Artesano?: IntFieldUpdateOperationsInput | number
    Transaccion?: transaccionUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type productoUncheckedUpdateManyWithoutUserCategoriaInput = {
    id_producto?: IntFieldUpdateOperationsInput | number
    nombre_prod?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion_prod?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    precio_prod?: NullableIntFieldUpdateOperationsInput | number | null
    ID_Artesano?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CompradorCountOutputTypeDefaultArgs instead
     */
    export type CompradorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompradorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductoCountOutputTypeDefaultArgs instead
     */
    export type ProductoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArtesanoCountOutputTypeDefaultArgs instead
     */
    export type ArtesanoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArtesanoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriaCountOutputTypeDefaultArgs instead
     */
    export type CategoriaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use compradorDefaultArgs instead
     */
    export type compradorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = compradorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use productoDefaultArgs instead
     */
    export type productoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = productoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use transaccionDefaultArgs instead
     */
    export type transaccionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = transaccionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usuarioDefaultArgs instead
     */
    export type usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use artesanoDefaultArgs instead
     */
    export type artesanoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = artesanoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use categoriaDefaultArgs instead
     */
    export type categoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = categoriaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use carritoDefaultArgs instead
     */
    export type carritoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = carritoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}